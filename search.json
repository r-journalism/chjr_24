[
  {
    "objectID": "getting_started/1_intro_a.html",
    "href": "getting_started/1_intro_a.html",
    "title": "Class prep: Intro to R and RStudio",
    "section": "",
    "text": "welcome to class!"
  },
  {
    "objectID": "getting_started/1_intro_a.html#welcome",
    "href": "getting_started/1_intro_a.html#welcome",
    "title": "Class prep: Intro to R and RStudio",
    "section": "Welcome!",
    "text": "Welcome!\nBefore we officially get started, please be sure you have the latest versions of R and RStudio installed.\nAlso make sure you’ve installed this by running in the console:\ninstall.packages(\"usethis\")\nusethis::use_course(\"https://github.com/r-journalism/chjr/archive/master.zip\")\nReady? Okay, let’s go!"
  },
  {
    "objectID": "getting_started/1_intro_a.html#tour-of-r-and-rstudio",
    "href": "getting_started/1_intro_a.html#tour-of-r-and-rstudio",
    "title": "Class prep: Intro to R and RStudio",
    "section": "Tour of R and RStudio",
    "text": "Tour of R and RStudio\nR is just a programming language and can be open in any coding program like Sublime or Visual Code Studio. But we’re going to focus on using R in the environment known as RStudio because it easily shows all the different parts, like plots and objects, well.\nWhen you first open RStudio, the app is divided into three sections.\nMost sections have tabs for even more additional ways to view different sorts of things.\nThese sections can be customized and placed wherever you want through the RStudio menu options (if you’d rather the Files tab be in the top right instead of the top left, for example). Preferences &gt; Pane Layout\n\nThe tall section on the left is the console and that’s where you can type in R code to execute.\nThis code is also called commands or functions.\n\nIn the top right section, there’s the Environment tab where you can see the data or objects you are currently working on.\nAt first this section is empty because you have not loaded any data yet.\nThere’s also a tab in the top right section for History– this is where RStudio keeps track of the commands you run in the console.\n\nA viewer is on the bottom right, where there are tabs to flip through the Files and folder structure of your computer (like in Finder or Explorer), the Plots (diagrams) when they’ve been generated, your list of available R Packages, Help information etc.\n\nReproducibility: Save your scripts\nThere’s a difference between quick, on-the-fly analysis and analysis you want to rerun later on.\nThe code you type out and run in console can be copied and pasted and saved in scripts and R Markdown files. Scripts end with .R file extension and R Markdown files, which mixes both R code and Markdown code, end with .Rmd.\nR scripts versus R Markdown\nYou may hear mentions of “R Markdown” and that’s essentially the same thing as R scripts except with some enhanced formatting so that the code can be published as a pdf or a website or notebook. R scripts and R Markdown can only be opened by coding programs but the websites or PDFs generated by R Markdown can be open by non-programming people. It’s a means for communicating your results effectively to a wider audience. Compare the differences here and here.\nIn this course we’ll be alternating between typing code in the console and typing and saving code in a script. The code that’s disposable and written just for quick exploration can be and will be written in the console. Code we want to reuse and re purpose later on should be saved in a script.\n\nThese R source code files can be viewed in a Source section and pushes the console window down to accommodate.\nTo create a new script go through the menu File &gt; New File &gt; R Script or through the green plus button on the top left. This will expand the 3 windows in RStudio to 4. The script viewer will appear in the top left quadrant and push the console window into the lower left.\n\nThe file extensions for these files when saved ends with .R\nAny code we type in here can be run in the console. Hitting the Run button at the top of the script window will run the line of code on which the cursor is sitting.\nTo run multiple lines of code, highlight them and click Run.\n\nBe sure to save your scripts after you create them. And also save before running your code in case you write code that makes R crash– which will happen once in a while."
  },
  {
    "objectID": "getting_started/1_intro_a.html#scripts",
    "href": "getting_started/1_intro_a.html#scripts",
    "title": "Class prep: Intro to R and RStudio",
    "section": "Scripts",
    "text": "Scripts\nR is an interpreter that uses a command line based environment.\nThis means that you have to type commands, rather than use the mouse and menus.\nThis has the advantage that you do not always have to retype commands.\nYou can store your commands in files, the so-called scripts. These scripts have typically file names with the extension .R as in script.R.\nYou can open an editor window to edit these files by clicking File &gt; New or File &gt; Open file…\nYou can run (send to the console window) part of the code by selecting lines and pressing CTRL+ENTER or CMD+ENTER or click the Run button at the top of the script editor window. If you do not select anything, R will run the line your cursor is on.\nYou can always run the whole script with the function source()\nFor example, to run the entire saved script.R if it’s in the root directory of the working directory, type\n\nsource(\"script.R\")\n\nYou can also click Run all in the editor window or type CTRL+SHIFT+S or CMD+SHIFT+S"
  },
  {
    "objectID": "getting_started/1_intro_a.html#project-directory-habits",
    "href": "getting_started/1_intro_a.html#project-directory-habits",
    "title": "Class prep: Intro to R and RStudio",
    "section": "Project directory habits",
    "text": "Project directory habits\nYour working directory is the folder on your computer in which you are currently working. When you ask R to open a certain file, it will look in the working directory for this file, and when you tell R to save a data file or figure, it will save it in the working directory.\nBefore you start working, please set your working directory to where all your data and script files are or should be stored.\nWhen you see code in a black box throughout this class, I want you to run that code in R unless noted otherwise. You can run it in the console, I’d prefer you do so in a script so you can see your history. In the video, you’ll see me swap back and forth between coding in the console and the script. This really depends on if I’m experimenting with code quickly or if it’s something I know I should track. Often I will copy and paste code executed from the console to growing script as an afterthought. Also, be sure to read the commented out code because I try to give additional context, like tips on what to do if the command fails.\nThis is an example of setting a working directory to a manual directory on your computer.\n\n# On a mac, it'd look like this\nsetwd(\"~/projects/learn-r-journalism\")\n\n# On a PC, it might look like this\nsetwd(\"C:/Documents/learn-r-journalism\")\n\nMake sure that slashes are forward slashes and that you don’t forget the quotation marks.\nWithin RStudio, you can also set the working directory via the menu Tools &gt; Set Working Directory\n\nThe commands above, setwd() was an example of setting an absolute folder.\nThis works for you for the purposes of this class, but if you wanted to share your methodology and script in the future or if you wanted to save run the code on another computer it would likely not work because it would be looking through a folder structure that doesn’t exist on any computer except the one where the original script was written. This is not ideal for reproducibility.\nWorking directories are a tough concept. If you’re curious about learning the BEST method for setting up directories for each project you’re working on, I’ve got some documentation.\nAlso, if you’re still curious, I follow this structure for all my R projects."
  },
  {
    "objectID": "getting_started/1_intro_a.html#syntax",
    "href": "getting_started/1_intro_a.html#syntax",
    "title": "Class prep: Intro to R and RStudio",
    "section": "Syntax",
    "text": "Syntax\nYou must follow pretty specific syntax rules for it to work. R won’t guess for you.\n\n\nR is case-sensitive (unlike SQL) intepreted language (unlike C)\nCan enter commands at prompt &gt; or in batch\nComments are preceded by #\n\nThis is important to use often in your code for documentation\nYou’ll see it often in this course\n\nStatements are lines of code such as functions and object assignments\n\nEnters in code (as in a new line) or semi-colons will separate statements"
  },
  {
    "objectID": "getting_started/1_intro_a.html#libraries",
    "href": "getting_started/1_intro_a.html#libraries",
    "title": "Class prep: Intro to R and RStudio",
    "section": "Libraries",
    "text": "Libraries\nOne of the many benefits of R is that it is open source and free. This means users like you and me can create code that we use code that people in the data community created to make everyone’s lives easier.\nThese shared code snippets can help you do something as simple as combining spreadsheets in a folder or something as complicated as seasonally adjusting data in a time series.\nThey are organized in so-called packages or libraries.\nYou can do a lot of statistical analysis in R without any additional libraries— this is called base R.\nBut other users have created libraries with functions that solve common problems. R package users download only the libraries that they need for an individual project.\nTo get a list of all installed packages, go to the packages window or type library() in the console window. If the box in front of the package name is ticked in the packages window, the package is loaded and the functions within it are ready to be called.\nThere are many more packages available on the R website. If you want to install and use a package (for example, the packaged called “dplyr”) you should:\n\nInstall the package: click install packages in the packages window and type dplyr or type install.packages(\"dplyr\") in the console window.\nLoad the package: Check box in front of dplyr or type library(\"dplyr\") in the console window."
  },
  {
    "objectID": "getting_started/1_intro_a.html#common-r-commands",
    "href": "getting_started/1_intro_a.html#common-r-commands",
    "title": "Class prep: Intro to R and RStudio",
    "section": "Common R commands",
    "text": "Common R commands\nR can be used as a calculator.\nJust type an equation in the console window after the &gt;\nIn those code sections, the code preceded by ## is the output of the code from the lines above.\nPlease type in 10^2 + 26 into the R environment below and click Run code.\nIf you got 126 go ahead and click Submit Answer.\n\n\n\n\n\n\n\n10^2 + 26\n\n\n\nWorkspace\nYou can give numbers a name.\nBy doing so, they become so-called variables which can be used later.\nYou can assign values to an object name with either a = or &lt;-.\nThe command below sets 4 as a.\n\n\na &lt;- 4\na\n\n\n\na is now saved up in the Environment tab in RStudio.\n\nYou can do calculations with a now.\nTry multiplying a with any number.\na * _\n\n\na *\n\n\n\nIf you specify a again, it will forget what value you had before because you did not assign it to anything.\n\n\na\n\n\n\nYou can also assign a value to a using the old one\n\n\na &lt;- a + 10\na\n\n\n\nTo remove all variables from R’s memory, type\n\nrm(list=ls())\n\nor click the “clear all” broom button in the work space window."
  },
  {
    "objectID": "getting_started/1_intro_a.html#objects-in-r",
    "href": "getting_started/1_intro_a.html#objects-in-r",
    "title": "Class prep: Intro to R and RStudio",
    "section": "Objects in R",
    "text": "Objects in R\n\nScalars and vectors\nLike in many other programs, R organizes numbers in scalars (a single number 0-dimensional), vectors (a row of numbers, also called arrays - `-dimensional) and matrices (which we won’t get into now).\nThe a you defined was scalar.\nTo define a vector with the numbers 3,4, and 5, you need the function c() which is short for concatenate (or paste together).\n\n\nb &lt;- c(3,4,5)\nb"
  },
  {
    "objectID": "getting_started/1_intro_a.html#functions",
    "href": "getting_started/1_intro_a.html#functions",
    "title": "Class prep: Intro to R and RStudio",
    "section": "Functions",
    "text": "Functions\nIf you would like to compute the mean of all the elements in the vector b from the example above, you could type\nPlease type out (300+4000+50)/3 in the code tester below:\n\n\n#type in and run the code above\n\n\n\n\n\n(300+4000+50)/3\n\n\nBut when the vector is very long, this is very boring and time-consuming work.\nFunctions do things to data. R is built on them. Some functions come with R, like median() or summary() and others come as part of packages that others have created.\nWhen you use a function to compute an average, you’ll type\n\nmean(x=b)\n\nWithin the brackets you specify the arguments.\nArguments give extra information to the function. In this case, the argument x says of which set of numbers (vector) the mean should computed (namely of b).\nSometimes the name of the argument is not necessary:\n\n\nb &lt;- c(300,4000,50)\nmean(b)\n\n\n\nAlso works."
  },
  {
    "objectID": "getting_started/1_intro_a.html#plots",
    "href": "getting_started/1_intro_a.html#plots",
    "title": "Class prep: Intro to R and RStudio",
    "section": "Plots",
    "text": "Plots\nR can make simple graphics right away.\n\n\n# rnorm() is a base function that creates random samples from a random distribution\n\nx &lt;- rnorm(100)\n\n# plot() is a base function that charts\n\nplot(x)\n\n\n\n\nIn the first line, 100 random numbers are assigned to the variable x, which becomes a vector by this operation.\nIn the second line, all these values are plotted in the plot window."
  },
  {
    "objectID": "getting_started/1_intro_a.html#not-available-data",
    "href": "getting_started/1_intro_a.html#not-available-data",
    "title": "Class prep: Intro to R and RStudio",
    "section": "Not available data",
    "text": "Not available data\nWhen you work with real data, you will encounter missing values because instrumentation failed or human error.\nWhen a data is not available, you’ll often find an NA instead of a number.\n\nj &lt;- c(1,2,NA)\n\nComputing statistics of incomplete data sets is strictly not possible.\nmaybe the largest value occurred during the weekend when you didn’t measure. Therefore, R will say that it doesn’t know what the largest value of j is\n\n\nmax(j)\n\n\n\nIf you don’t mind about the missing data and want to compute the statistics anyway, you can add the argument na.rm=TRUE (Should I remove the NAs? Yes)\n\n\nmax(j, na.rm=T)\n\n\n\nNAs will also affect any sort of math if you’re not careful\n\n\nsum(j)\n# compared to\nsum(j, na.rm=T)\n\n\n\nHere are some links on how to handle NAs in your data"
  },
  {
    "objectID": "getting_started/1_intro_a.html#base-r-versus-tidyverse",
    "href": "getting_started/1_intro_a.html#base-r-versus-tidyverse",
    "title": "Class prep: Intro to R and RStudio",
    "section": "Base R versus Tidyverse",
    "text": "Base R versus Tidyverse\nI will often mention “Base R” and “Tidyverse” throughout the course.\nBase R is what you get when you install R and don’t install anything extra.\nEverything you do in Tidyverse– the importing and wrangling of data, as well as the visualizations– can be done with Base R. It’s just older, the syntax is trickier, and it unfortunately has huge learning curve.\nFor the purposes of this class, you’ll learn just enough Base R to get things done but we’ll spend most of our time using functions in packages that have since been created by users to make our lives easier and have a good history of support from their creators."
  },
  {
    "objectID": "getting_started/1_intro_a.html#intro-pt-ii",
    "href": "getting_started/1_intro_a.html#intro-pt-ii",
    "title": "Class prep: Intro to R and RStudio",
    "section": "Intro pt II",
    "text": "Intro pt II\nStop this tutorial in the Render tab of RStudio (press the stop button).\nTake a break! Walk around. Have a snack.\nAbsorb what you’ve learned so far. It was a lot.\nWhen you’re ready to move on to pt. 2 just type this in the console of RStudio:\nlearnr::run_tutorial(\"1_intro_b\", \"chjr\")"
  },
  {
    "objectID": "getting_started/r_and_rstudio.html",
    "href": "getting_started/r_and_rstudio.html",
    "title": "R and RStudio",
    "section": "",
    "text": "mutable ok_reponse = (reponse, n) =&gt; { return html`Loading...` };\nviewof reponse = Inputs.radio(\n  new Map([\n    [\"First choice.\", 1],\n    [\"Second choice.\", 2],\n    [\"Third choice\", 3],\n    [\"Fourth choice.\", 4]\n  ])\n);\nok_reponse(reponse, 2);\nwelcome to class!",
    "crumbs": [
      "Getting Started",
      "R and RStudio"
    ]
  },
  {
    "objectID": "getting_started/r_and_rstudio.html#tour-of-r-and-rstudio",
    "href": "getting_started/r_and_rstudio.html#tour-of-r-and-rstudio",
    "title": "R and RStudio",
    "section": "Tour of R and RStudio",
    "text": "Tour of R and RStudio\nR is just a programming language and can be open in any coding program like Sublime or Visual Code Studio. But we’re going to focus on using R in the environment known as RStudio because it easily shows all the different parts, like plots and objects, well.\nWhen you first open RStudio, the app is divided into three sections.\nMost sections have tabs for even more additional ways to view different sorts of things.\nThese sections can be customized and placed wherever you want through the RStudio menu options (if you’d rather the Files tab be in the top right instead of the top left, for example). Preferences &gt; Pane Layout\n\nThe tall section on the left is the console and that’s where you can type in R code to execute.\nThis code is also called commands or functions.\n\nIn the top right section, there’s the Environment tab where you can see the data or objects you are currently working on.\nAt first this section is empty because you have not loaded any data yet.\nThere’s also a tab in the top right section for History– this is where RStudio keeps track of the commands you run in the console.\n\nA viewer is on the bottom right, where there are tabs to flip through the Files and folder structure of your computer (like in Finder or Explorer), the Plots (diagrams) when they’ve been generated, your list of available R Packages, Help information etc.\n\nReproducibility: Save your scripts\nThere’s a difference between quick, on-the-fly analysis and analysis you want to rerun later on.\nThe code you type out and run in console can be copied and pasted and saved in scripts and R Markdown files. Scripts end with .R file extension and R Markdown files, which mixes both R code and Markdown code, end with .Rmd.\nR scripts versus R Markdown\nYou may hear mentions of “R Markdown” and that’s essentially the same thing as R scripts except with some enhanced formatting so that the code can be published as a pdf or a website or notebook. R scripts and R Markdown can only be opened by coding programs but the websites or PDFs generated by R Markdown can be open by non-programming people. It’s a means for communicating your results effectively to a wider audience. Compare the differences here and here.\nIn this course we’ll be alternating between typing code in the console and typing and saving code in a script. The code that’s disposable and written just for quick exploration can be and will be written in the console. Code we want to reuse and re purpose later on should be saved in a script.\n\nThese R source code files can be viewed in a Source section and pushes the console window down to accommodate.\nTo create a new script go through the menu File &gt; New File &gt; R Script or through the green plus button on the top left. This will expand the 3 windows in RStudio to 4. The script viewer will appear in the top left quadrant and push the console window into the lower left.\n\nThe file extensions for these files when saved ends with .R\nAny code we type in here can be run in the console. Hitting the Run button at the top of the script window will run the line of code on which the cursor is sitting.\nTo run multiple lines of code, highlight them and click Run.\n\nBe sure to save your scripts after you create them. And also save before running your code in case you write code that makes R crash– which will happen once in a while.",
    "crumbs": [
      "Getting Started",
      "R and RStudio"
    ]
  },
  {
    "objectID": "getting_started/r_and_rstudio.html#scripts",
    "href": "getting_started/r_and_rstudio.html#scripts",
    "title": "R and RStudio",
    "section": "Scripts",
    "text": "Scripts\nR is an interpreter that uses a command line based environment.\nThis means that you have to type commands, rather than use the mouse and menus.\nThis has the advantage that you do not always have to retype commands.\nYou can store your commands in files, the so-called scripts. These scripts have typically file names with the extension .R as in script.R.\nYou can open an editor window to edit these files by clicking File &gt; New or File &gt; Open file…\nYou can run (send to the console window) part of the code by selecting lines and pressing CTRL+ENTER or CMD+ENTER or click the Run button at the top of the script editor window. If you do not select anything, R will run the line your cursor is on.\nYou can always run the whole script with the function source()\nFor example, to run the entire saved script.R if it’s in the root directory of the working directory, type\n\nsource(\"script.R\")\n\nYou can also click Run all in the editor window or type CTRL+SHIFT+S or CMD+SHIFT+S",
    "crumbs": [
      "Getting Started",
      "R and RStudio"
    ]
  },
  {
    "objectID": "getting_started/r_and_rstudio.html#project-directory-habits",
    "href": "getting_started/r_and_rstudio.html#project-directory-habits",
    "title": "R and RStudio",
    "section": "Project directory habits",
    "text": "Project directory habits\nYour working directory is the folder on your computer in which you are currently working. When you ask R to open a certain file, it will look in the working directory for this file, and when you tell R to save a data file or figure, it will save it in the working directory.\nBefore you start working, please set your working directory to where all your data and script files are or should be stored.\nWhen you see code in a black box throughout this class, I want you to run that code in R unless noted otherwise. You can run it in the console, I’d prefer you do so in a script so you can see your history. In the video, you’ll see me swap back and forth between coding in the console and the script. This really depends on if I’m experimenting with code quickly or if it’s something I know I should track. Often I will copy and paste code executed from the console to growing script as an afterthought. Also, be sure to read the commented out code because I try to give additional context, like tips on what to do if the command fails.\nThis is an example of setting a working directory to a manual directory on your computer.\n\n# On a mac, it'd look like this\nsetwd(\"~/projects/learn-r-journalism\")\n\n# On a PC, it might look like this\nsetwd(\"C:/Documents/learn-r-journalism\")\n\nMake sure that slashes are forward slashes and that you don’t forget the quotation marks.\nWithin RStudio, you can also set the working directory via the menu Tools &gt; Set Working Directory\n\nThe commands above, setwd() was an example of setting an absolute folder.\nThis works for you for the purposes of this class, but if you wanted to share your methodology and script in the future or if you wanted to save run the code on another computer it would likely not work because it would be looking through a folder structure that doesn’t exist on any computer except the one where the original script was written. This is not ideal for reproducibility.\nWorking directories are a tough concept. If you’re curious about learning the BEST method for setting up directories for each project you’re working on, I’ve got some documentation.\nAlso, if you’re still curious, I follow this structure for all my R projects.",
    "crumbs": [
      "Getting Started",
      "R and RStudio"
    ]
  },
  {
    "objectID": "getting_started/r_and_rstudio.html#syntax",
    "href": "getting_started/r_and_rstudio.html#syntax",
    "title": "R and RStudio",
    "section": "Syntax",
    "text": "Syntax\nYou must follow pretty specific syntax rules for it to work. R won’t guess for you.\n\n\nR is case-sensitive (unlike SQL) intepreted language (unlike C)\nCan enter commands at prompt &gt; or in batch\nComments are preceded by #\n\nThis is important to use often in your code for documentation\nYou’ll see it often in this course\n\nStatements are lines of code such as functions and object assignments\n\nEnters in code (as in a new line) or semi-colons will separate statements",
    "crumbs": [
      "Getting Started",
      "R and RStudio"
    ]
  },
  {
    "objectID": "getting_started/r_and_rstudio.html#libraries",
    "href": "getting_started/r_and_rstudio.html#libraries",
    "title": "R and RStudio",
    "section": "Libraries",
    "text": "Libraries\nOne of the many benefits of R is that it is open source and free. This means users like you and me can create code that we use code that people in the data community created to make everyone’s lives easier.\nThese shared code snippets can help you do something as simple as combining spreadsheets in a folder or something as complicated as seasonally adjusting data in a time series.\nThey are organized in so-called packages or libraries.\nYou can do a lot of statistical analysis in R without any additional libraries— this is called base R.\nBut other users have created libraries with functions that solve common problems. R package users download only the libraries that they need for an individual project.\nTo get a list of all installed packages, go to the packages window or type library() in the console window. If the box in front of the package name is ticked in the packages window, the package is loaded and the functions within it are ready to be called.\nThere are many more packages available on the R website. If you want to install and use a package (for example, the packaged called “dplyr”) you should:\n\nInstall the package: click install packages in the packages window and type dplyr or type install.packages(\"dplyr\") in the console window.\nLoad the package: Check box in front of dplyr or type library(\"dplyr\") in the console window.",
    "crumbs": [
      "Getting Started",
      "R and RStudio"
    ]
  },
  {
    "objectID": "getting_started/r_and_rstudio.html#common-r-commands",
    "href": "getting_started/r_and_rstudio.html#common-r-commands",
    "title": "R and RStudio",
    "section": "Common R commands",
    "text": "Common R commands\nR can be used as a calculator.\nJust type an equation in the console window after the &gt;\nIn those code sections, the code preceded by ## is the output of the code from the lines above.\nPlease type in 10^2 + 26 into the R environment below and click Run code.\n\n\n\n\n\n\n\n\n\n\n\n\nWorkspace\nYou can give numbers a name.\nBy doing so, they become so-called variables which can be used later.\nYou can assign values to an object name with either a = or &lt;-.\nThe command below sets 4 as a.\n\n\n\n\n\n\n\n\na is now saved up in the Environment tab in RStudio.\n\nYou can do calculations with a now.\nTry multiplying a with any number.\na * _\n\n\n\n\n\n\n\n\nIf you specify a again, it will forget what value you had before because you did not assign it to anything.\n\n\n\n\n\n\n\n\nYou can also assign a value to a using the old one\n\n\n\n\n\n\n\n\nTo remove all variables from R’s memory, type\n\n\n\n\n\n\n\n\nor click the “clear all” broom button in the work space window.",
    "crumbs": [
      "Getting Started",
      "R and RStudio"
    ]
  },
  {
    "objectID": "getting_started/r_and_rstudio.html#objects-in-r",
    "href": "getting_started/r_and_rstudio.html#objects-in-r",
    "title": "R and RStudio",
    "section": "Objects in R",
    "text": "Objects in R\n\nScalars and vectors\nLike in many other programs, R organizes numbers in scalars (a single number 0-dimensional), vectors (a row of numbers, also called arrays - `-dimensional) and matrices (which we won’t get into now).\nThe a you defined was scalar.\nTo define a vector with the numbers 3,4, and 5, you need the function c() which is short for concatenate (or paste together).",
    "crumbs": [
      "Getting Started",
      "R and RStudio"
    ]
  },
  {
    "objectID": "getting_started/r_and_rstudio.html#functions",
    "href": "getting_started/r_and_rstudio.html#functions",
    "title": "R and RStudio",
    "section": "Functions",
    "text": "Functions\nIf you would like to compute the mean of all the elements in the vector b from the example above, you could type\nPlease type out (300+4000+50)/3 in the code tester below:\n\n\n\n\n\n\nBut when the vector is very long, this is very boring and time-consuming work.\nFunctions do things to data. R is built on them. Some functions come with R, like median() or summary() and others come as part of packages that others have created.\nWhen you use a function to compute an average, you’ll type\n\nmean(x=b)\n\nWithin the brackets you specify the arguments.\nArguments give extra information to the function. In this case, the argument x says of which set of numbers (vector) the mean should computed (namely of b).\nSometimes the name of the argument is not necessary:\n\n\n\n\n\n\n\n\nAlso works.",
    "crumbs": [
      "Getting Started",
      "R and RStudio"
    ]
  },
  {
    "objectID": "getting_started/r_and_rstudio.html#plots",
    "href": "getting_started/r_and_rstudio.html#plots",
    "title": "R and RStudio",
    "section": "Plots",
    "text": "Plots\nR can make simple graphics right away.\n\n\n\n\n\n\n\n\n\nIn the first line, 100 random numbers are assigned to the variable x, which becomes a vector by this operation.\nIn the second line, all these values are plotted in the plot window.",
    "crumbs": [
      "Getting Started",
      "R and RStudio"
    ]
  },
  {
    "objectID": "getting_started/r_and_rstudio.html#not-available-data",
    "href": "getting_started/r_and_rstudio.html#not-available-data",
    "title": "R and RStudio",
    "section": "Not available data",
    "text": "Not available data\nWhen you work with real data, you will encounter missing values because instrumentation failed or human error.\nWhen a data is not available, you’ll often find an NA instead of a number.\n\n\n\n\n\n\n\n\nComputing statistics of incomplete data sets is strictly not possible.\nmaybe the largest value occurred during the weekend when you didn’t measure. Therefore, R will say that it doesn’t know what the largest value of j is\n\n\n\n\n\n\n\n\nIf you don’t mind about the missing data and want to compute the statistics anyway, you can add the argument na.rm=TRUE (Should I remove the NAs? Yes)\n\nmax(j, na.rm=T)\n\nNAs will also affect any sort of math if you’re not careful\n\n\n\n\n\n\n\n\nHere are some links on how to handle NAs in your data",
    "crumbs": [
      "Getting Started",
      "R and RStudio"
    ]
  },
  {
    "objectID": "getting_started/r_and_rstudio.html#base-r-versus-tidyverse",
    "href": "getting_started/r_and_rstudio.html#base-r-versus-tidyverse",
    "title": "R and RStudio",
    "section": "Base R versus Tidyverse",
    "text": "Base R versus Tidyverse\nI will often mention “Base R” and “Tidyverse” throughout the course.\nBase R is what you get when you install R and don’t install anything extra.\nEverything you do in Tidyverse– the importing and wrangling of data, as well as the visualizations– can be done with Base R. It’s just older, the syntax is trickier, and it unfortunately has huge learning curve.\nFor the purposes of this class, you’ll learn just enough Base R to get things done but we’ll spend most of our time using functions in packages that have since been created by users to make our lives easier and have a good history of support from their creators.",
    "crumbs": [
      "Getting Started",
      "R and RStudio"
    ]
  },
  {
    "objectID": "importing/importing_excel.html",
    "href": "importing/importing_excel.html",
    "title": "Importing Excel files",
    "section": "",
    "text": "mutable ok_reponse = (reponse, n) =&gt; { return html`Loading...` };\nviewof reponse = Inputs.radio(\n  new Map([\n    [\"First choice.\", 1],\n    [\"Second choice.\", 2],\n    [\"Third choice\", 3],\n    [\"Fourth choice.\", 4]\n  ])\n);\nok_reponse(reponse, 2);\nwelcome to class!",
    "crumbs": [
      "Importing Data",
      "Importing Excel files"
    ]
  },
  {
    "objectID": "importing/importing_excel.html#tour-of-r-and-rstudio",
    "href": "importing/importing_excel.html#tour-of-r-and-rstudio",
    "title": "Importing Excel files",
    "section": "Tour of R and RStudio",
    "text": "Tour of R and RStudio\nR is just a programming language and can be open in any coding program like Sublime or Visual Code Studio. But we’re going to focus on using R in the environment known as RStudio because it easily shows all the different parts, like plots and objects, well.\nWhen you first open RStudio, the app is divided into three sections.\nMost sections have tabs for even more additional ways to view different sorts of things.\nThese sections can be customized and placed wherever you want through the RStudio menu options (if you’d rather the Files tab be in the top right instead of the top left, for example). Preferences &gt; Pane Layout\n\nThe tall section on the left is the console and that’s where you can type in R code to execute.\nThis code is also called commands or functions.\n\nIn the top right section, there’s the Environment tab where you can see the data or objects you are currently working on.\nAt first this section is empty because you have not loaded any data yet.\nThere’s also a tab in the top right section for History– this is where RStudio keeps track of the commands you run in the console.\n\nA viewer is on the bottom right, where there are tabs to flip through the Files and folder structure of your computer (like in Finder or Explorer), the Plots (diagrams) when they’ve been generated, your list of available R Packages, Help information etc.\n\nReproducibility: Save your scripts\nThere’s a difference between quick, on-the-fly analysis and analysis you want to rerun later on.\nThe code you type out and run in console can be copied and pasted and saved in scripts and R Markdown files. Scripts end with .R file extension and R Markdown files, which mixes both R code and Markdown code, end with .Rmd.\nR scripts versus R Markdown\nYou may hear mentions of “R Markdown” and that’s essentially the same thing as R scripts except with some enhanced formatting so that the code can be published as a pdf or a website or notebook. R scripts and R Markdown can only be opened by coding programs but the websites or PDFs generated by R Markdown can be open by non-programming people. It’s a means for communicating your results effectively to a wider audience. Compare the differences here and here.\nIn this course we’ll be alternating between typing code in the console and typing and saving code in a script. The code that’s disposable and written just for quick exploration can be and will be written in the console. Code we want to reuse and re purpose later on should be saved in a script.\n\nThese R source code files can be viewed in a Source section and pushes the console window down to accommodate.\nTo create a new script go through the menu File &gt; New File &gt; R Script or through the green plus button on the top left. This will expand the 3 windows in RStudio to 4. The script viewer will appear in the top left quadrant and push the console window into the lower left.\n\nThe file extensions for these files when saved ends with .R\nAny code we type in here can be run in the console. Hitting the Run button at the top of the script window will run the line of code on which the cursor is sitting.\nTo run multiple lines of code, highlight them and click Run.\n\nBe sure to save your scripts after you create them. And also save before running your code in case you write code that makes R crash– which will happen once in a while.",
    "crumbs": [
      "Importing Data",
      "Importing Excel files"
    ]
  },
  {
    "objectID": "importing/importing_excel.html#scripts",
    "href": "importing/importing_excel.html#scripts",
    "title": "Importing Excel files",
    "section": "Scripts",
    "text": "Scripts\nR is an interpreter that uses a command line based environment.\nThis means that you have to type commands, rather than use the mouse and menus.\nThis has the advantage that you do not always have to retype commands.\nYou can store your commands in files, the so-called scripts. These scripts have typically file names with the extension .R as in script.R.\nYou can open an editor window to edit these files by clicking File &gt; New or File &gt; Open file…\nYou can run (send to the console window) part of the code by selecting lines and pressing CTRL+ENTER or CMD+ENTER or click the Run button at the top of the script editor window. If you do not select anything, R will run the line your cursor is on.\nYou can always run the whole script with the function source()\nFor example, to run the entire saved script.R if it’s in the root directory of the working directory, type\n\nsource(\"script.R\")\n\nYou can also click Run all in the editor window or type CTRL+SHIFT+S or CMD+SHIFT+S",
    "crumbs": [
      "Importing Data",
      "Importing Excel files"
    ]
  },
  {
    "objectID": "importing/importing_excel.html#project-directory-habits",
    "href": "importing/importing_excel.html#project-directory-habits",
    "title": "Importing Excel files",
    "section": "Project directory habits",
    "text": "Project directory habits\nYour working directory is the folder on your computer in which you are currently working. When you ask R to open a certain file, it will look in the working directory for this file, and when you tell R to save a data file or figure, it will save it in the working directory.\nBefore you start working, please set your working directory to where all your data and script files are or should be stored.\nWhen you see code in a black box throughout this class, I want you to run that code in R unless noted otherwise. You can run it in the console, I’d prefer you do so in a script so you can see your history. In the video, you’ll see me swap back and forth between coding in the console and the script. This really depends on if I’m experimenting with code quickly or if it’s something I know I should track. Often I will copy and paste code executed from the console to growing script as an afterthought. Also, be sure to read the commented out code because I try to give additional context, like tips on what to do if the command fails.\nThis is an example of setting a working directory to a manual directory on your computer.\n\n# On a mac, it'd look like this\nsetwd(\"~/projects/learn-r-journalism\")\n\n# On a PC, it might look like this\nsetwd(\"C:/Documents/learn-r-journalism\")\n\nMake sure that slashes are forward slashes and that you don’t forget the quotation marks.\nWithin RStudio, you can also set the working directory via the menu Tools &gt; Set Working Directory\n\nThe commands above, setwd() was an example of setting an absolute folder.\nThis works for you for the purposes of this class, but if you wanted to share your methodology and script in the future or if you wanted to save run the code on another computer it would likely not work because it would be looking through a folder structure that doesn’t exist on any computer except the one where the original script was written. This is not ideal for reproducibility.\nWorking directories are a tough concept. If you’re curious about learning the BEST method for setting up directories for each project you’re working on, I’ve got some documentation.\nAlso, if you’re still curious, I follow this structure for all my R projects.",
    "crumbs": [
      "Importing Data",
      "Importing Excel files"
    ]
  },
  {
    "objectID": "importing/importing_excel.html#syntax",
    "href": "importing/importing_excel.html#syntax",
    "title": "Importing Excel files",
    "section": "Syntax",
    "text": "Syntax\nYou must follow pretty specific syntax rules for it to work. R won’t guess for you.\n\n\nR is case-sensitive (unlike SQL) intepreted language (unlike C)\nCan enter commands at prompt &gt; or in batch\nComments are preceded by #\n\nThis is important to use often in your code for documentation\nYou’ll see it often in this course\n\nStatements are lines of code such as functions and object assignments\n\nEnters in code (as in a new line) or semi-colons will separate statements",
    "crumbs": [
      "Importing Data",
      "Importing Excel files"
    ]
  },
  {
    "objectID": "importing/importing_excel.html#libraries",
    "href": "importing/importing_excel.html#libraries",
    "title": "Importing Excel files",
    "section": "Libraries",
    "text": "Libraries\nOne of the many benefits of R is that it is open source and free. This means users like you and me can create code that we use code that people in the data community created to make everyone’s lives easier.\nThese shared code snippets can help you do something as simple as combining spreadsheets in a folder or something as complicated as seasonally adjusting data in a time series.\nThey are organized in so-called packages or libraries.\nYou can do a lot of statistical analysis in R without any additional libraries— this is called base R.\nBut other users have created libraries with functions that solve common problems. R package users download only the libraries that they need for an individual project.\nTo get a list of all installed packages, go to the packages window or type library() in the console window. If the box in front of the package name is ticked in the packages window, the package is loaded and the functions within it are ready to be called.\nThere are many more packages available on the R website. If you want to install and use a package (for example, the packaged called “dplyr”) you should:\n\nInstall the package: click install packages in the packages window and type dplyr or type install.packages(\"dplyr\") in the console window.\nLoad the package: Check box in front of dplyr or type library(\"dplyr\") in the console window.",
    "crumbs": [
      "Importing Data",
      "Importing Excel files"
    ]
  },
  {
    "objectID": "importing/importing_excel.html#common-r-commands",
    "href": "importing/importing_excel.html#common-r-commands",
    "title": "Importing Excel files",
    "section": "Common R commands",
    "text": "Common R commands\nR can be used as a calculator.\nJust type an equation in the console window after the &gt;\nIn those code sections, the code preceded by ## is the output of the code from the lines above.\nPlease type in 10^2 + 26 into the R environment below and click Run code.\n\n\n\n\n\n\n\n\n\n\n\n\nWorkspace\nYou can give numbers a name.\nBy doing so, they become so-called variables which can be used later.\nYou can assign values to an object name with either a = or &lt;-.\nThe command below sets 4 as a.\n\n\n\n\n\n\n\n\na is now saved up in the Environment tab in RStudio.\n\nYou can do calculations with a now.\nTry multiplying a with any number.\na * _\n\n\n\n\n\n\n\n\nIf you specify a again, it will forget what value you had before because you did not assign it to anything.\n\n\n\n\n\n\n\n\nYou can also assign a value to a using the old one\n\n\n\n\n\n\n\n\nTo remove all variables from R’s memory, type\n\n\n\n\n\n\n\n\nor click the “clear all” broom button in the work space window.",
    "crumbs": [
      "Importing Data",
      "Importing Excel files"
    ]
  },
  {
    "objectID": "importing/importing_excel.html#objects-in-r",
    "href": "importing/importing_excel.html#objects-in-r",
    "title": "Importing Excel files",
    "section": "Objects in R",
    "text": "Objects in R\n\nScalars and vectors\nLike in many other programs, R organizes numbers in scalars (a single number 0-dimensional), vectors (a row of numbers, also called arrays - `-dimensional) and matrices (which we won’t get into now).\nThe a you defined was scalar.\nTo define a vector with the numbers 3,4, and 5, you need the function c() which is short for concatenate (or paste together).",
    "crumbs": [
      "Importing Data",
      "Importing Excel files"
    ]
  },
  {
    "objectID": "importing/importing_excel.html#functions",
    "href": "importing/importing_excel.html#functions",
    "title": "Importing Excel files",
    "section": "Functions",
    "text": "Functions\nIf you would like to compute the mean of all the elements in the vector b from the example above, you could type\nPlease type out (300+4000+50)/3 in the code tester below:\n\n\n\n\n\n\nBut when the vector is very long, this is very boring and time-consuming work.\nFunctions do things to data. R is built on them. Some functions come with R, like median() or summary() and others come as part of packages that others have created.\nWhen you use a function to compute an average, you’ll type\n\nmean(x=b)\n\nWithin the brackets you specify the arguments.\nArguments give extra information to the function. In this case, the argument x says of which set of numbers (vector) the mean should computed (namely of b).\nSometimes the name of the argument is not necessary:\n\n\n\n\n\n\n\n\nAlso works.",
    "crumbs": [
      "Importing Data",
      "Importing Excel files"
    ]
  },
  {
    "objectID": "importing/importing_excel.html#plots",
    "href": "importing/importing_excel.html#plots",
    "title": "Importing Excel files",
    "section": "Plots",
    "text": "Plots\nR can make simple graphics right away.\n\n\n\n\n\n\n\n\n\nIn the first line, 100 random numbers are assigned to the variable x, which becomes a vector by this operation.\nIn the second line, all these values are plotted in the plot window.",
    "crumbs": [
      "Importing Data",
      "Importing Excel files"
    ]
  },
  {
    "objectID": "importing/importing_excel.html#not-available-data",
    "href": "importing/importing_excel.html#not-available-data",
    "title": "Importing Excel files",
    "section": "Not available data",
    "text": "Not available data\nWhen you work with real data, you will encounter missing values because instrumentation failed or human error.\nWhen a data is not available, you’ll often find an NA instead of a number.\n\n\n\n\n\n\n\n\nComputing statistics of incomplete data sets is strictly not possible.\nmaybe the largest value occurred during the weekend when you didn’t measure. Therefore, R will say that it doesn’t know what the largest value of j is\n\n\n\n\n\n\n\n\nIf you don’t mind about the missing data and want to compute the statistics anyway, you can add the argument na.rm=TRUE (Should I remove the NAs? Yes)\n\nmax(j, na.rm=T)\n\nNAs will also affect any sort of math if you’re not careful\n\n\n\n\n\n\n\n\nHere are some links on how to handle NAs in your data",
    "crumbs": [
      "Importing Data",
      "Importing Excel files"
    ]
  },
  {
    "objectID": "importing/importing_excel.html#base-r-versus-tidyverse",
    "href": "importing/importing_excel.html#base-r-versus-tidyverse",
    "title": "Importing Excel files",
    "section": "Base R versus Tidyverse",
    "text": "Base R versus Tidyverse\nI will often mention “Base R” and “Tidyverse” throughout the course.\nBase R is what you get when you install R and don’t install anything extra.\nEverything you do in Tidyverse– the importing and wrangling of data, as well as the visualizations– can be done with Base R. It’s just older, the syntax is trickier, and it unfortunately has huge learning curve.\nFor the purposes of this class, you’ll learn just enough Base R to get things done but we’ll spend most of our time using functions in packages that have since been created by users to make our lives easier and have a good history of support from their creators.",
    "crumbs": [
      "Importing Data",
      "Importing Excel files"
    ]
  },
  {
    "objectID": "wrangling/explore_arrange.html",
    "href": "wrangling/explore_arrange.html",
    "title": "Exploring and arranging data",
    "section": "",
    "text": "mutable ok_reponse = (reponse, n) =&gt; { return html`Loading...` };\nviewof reponse = Inputs.radio(\n  new Map([\n    [\"First choice.\", 1],\n    [\"Second choice.\", 2],\n    [\"Third choice\", 3],\n    [\"Fourth choice.\", 4]\n  ])\n);\nok_reponse(reponse, 2);\nwelcome to class!",
    "crumbs": [
      "Wranging Data",
      "Exploring and arranging data"
    ]
  },
  {
    "objectID": "wrangling/explore_arrange.html#tour-of-r-and-rstudio",
    "href": "wrangling/explore_arrange.html#tour-of-r-and-rstudio",
    "title": "Exploring and arranging data",
    "section": "Tour of R and RStudio",
    "text": "Tour of R and RStudio\nR is just a programming language and can be open in any coding program like Sublime or Visual Code Studio. But we’re going to focus on using R in the environment known as RStudio because it easily shows all the different parts, like plots and objects, well.\nWhen you first open RStudio, the app is divided into three sections.\nMost sections have tabs for even more additional ways to view different sorts of things.\nThese sections can be customized and placed wherever you want through the RStudio menu options (if you’d rather the Files tab be in the top right instead of the top left, for example). Preferences &gt; Pane Layout\n\nThe tall section on the left is the console and that’s where you can type in R code to execute.\nThis code is also called commands or functions.\n\nIn the top right section, there’s the Environment tab where you can see the data or objects you are currently working on.\nAt first this section is empty because you have not loaded any data yet.\nThere’s also a tab in the top right section for History– this is where RStudio keeps track of the commands you run in the console.\n\nA viewer is on the bottom right, where there are tabs to flip through the Files and folder structure of your computer (like in Finder or Explorer), the Plots (diagrams) when they’ve been generated, your list of available R Packages, Help information etc.\n\nReproducibility: Save your scripts\nThere’s a difference between quick, on-the-fly analysis and analysis you want to rerun later on.\nThe code you type out and run in console can be copied and pasted and saved in scripts and R Markdown files. Scripts end with .R file extension and R Markdown files, which mixes both R code and Markdown code, end with .Rmd.\nR scripts versus R Markdown\nYou may hear mentions of “R Markdown” and that’s essentially the same thing as R scripts except with some enhanced formatting so that the code can be published as a pdf or a website or notebook. R scripts and R Markdown can only be opened by coding programs but the websites or PDFs generated by R Markdown can be open by non-programming people. It’s a means for communicating your results effectively to a wider audience. Compare the differences here and here.\nIn this course we’ll be alternating between typing code in the console and typing and saving code in a script. The code that’s disposable and written just for quick exploration can be and will be written in the console. Code we want to reuse and re purpose later on should be saved in a script.\n\nThese R source code files can be viewed in a Source section and pushes the console window down to accommodate.\nTo create a new script go through the menu File &gt; New File &gt; R Script or through the green plus button on the top left. This will expand the 3 windows in RStudio to 4. The script viewer will appear in the top left quadrant and push the console window into the lower left.\n\nThe file extensions for these files when saved ends with .R\nAny code we type in here can be run in the console. Hitting the Run button at the top of the script window will run the line of code on which the cursor is sitting.\nTo run multiple lines of code, highlight them and click Run.\n\nBe sure to save your scripts after you create them. And also save before running your code in case you write code that makes R crash– which will happen once in a while.",
    "crumbs": [
      "Wranging Data",
      "Exploring and arranging data"
    ]
  },
  {
    "objectID": "wrangling/explore_arrange.html#scripts",
    "href": "wrangling/explore_arrange.html#scripts",
    "title": "Exploring and arranging data",
    "section": "Scripts",
    "text": "Scripts\nR is an interpreter that uses a command line based environment.\nThis means that you have to type commands, rather than use the mouse and menus.\nThis has the advantage that you do not always have to retype commands.\nYou can store your commands in files, the so-called scripts. These scripts have typically file names with the extension .R as in script.R.\nYou can open an editor window to edit these files by clicking File &gt; New or File &gt; Open file…\nYou can run (send to the console window) part of the code by selecting lines and pressing CTRL+ENTER or CMD+ENTER or click the Run button at the top of the script editor window. If you do not select anything, R will run the line your cursor is on.\nYou can always run the whole script with the function source()\nFor example, to run the entire saved script.R if it’s in the root directory of the working directory, type\n\nsource(\"script.R\")\n\nYou can also click Run all in the editor window or type CTRL+SHIFT+S or CMD+SHIFT+S",
    "crumbs": [
      "Wranging Data",
      "Exploring and arranging data"
    ]
  },
  {
    "objectID": "wrangling/explore_arrange.html#project-directory-habits",
    "href": "wrangling/explore_arrange.html#project-directory-habits",
    "title": "Exploring and arranging data",
    "section": "Project directory habits",
    "text": "Project directory habits\nYour working directory is the folder on your computer in which you are currently working. When you ask R to open a certain file, it will look in the working directory for this file, and when you tell R to save a data file or figure, it will save it in the working directory.\nBefore you start working, please set your working directory to where all your data and script files are or should be stored.\nWhen you see code in a black box throughout this class, I want you to run that code in R unless noted otherwise. You can run it in the console, I’d prefer you do so in a script so you can see your history. In the video, you’ll see me swap back and forth between coding in the console and the script. This really depends on if I’m experimenting with code quickly or if it’s something I know I should track. Often I will copy and paste code executed from the console to growing script as an afterthought. Also, be sure to read the commented out code because I try to give additional context, like tips on what to do if the command fails.\nThis is an example of setting a working directory to a manual directory on your computer.\n\n# On a mac, it'd look like this\nsetwd(\"~/projects/learn-r-journalism\")\n\n# On a PC, it might look like this\nsetwd(\"C:/Documents/learn-r-journalism\")\n\nMake sure that slashes are forward slashes and that you don’t forget the quotation marks.\nWithin RStudio, you can also set the working directory via the menu Tools &gt; Set Working Directory\n\nThe commands above, setwd() was an example of setting an absolute folder.\nThis works for you for the purposes of this class, but if you wanted to share your methodology and script in the future or if you wanted to save run the code on another computer it would likely not work because it would be looking through a folder structure that doesn’t exist on any computer except the one where the original script was written. This is not ideal for reproducibility.\nWorking directories are a tough concept. If you’re curious about learning the BEST method for setting up directories for each project you’re working on, I’ve got some documentation.\nAlso, if you’re still curious, I follow this structure for all my R projects.",
    "crumbs": [
      "Wranging Data",
      "Exploring and arranging data"
    ]
  },
  {
    "objectID": "wrangling/explore_arrange.html#syntax",
    "href": "wrangling/explore_arrange.html#syntax",
    "title": "Exploring and arranging data",
    "section": "Syntax",
    "text": "Syntax\nYou must follow pretty specific syntax rules for it to work. R won’t guess for you.\n\n\nR is case-sensitive (unlike SQL) intepreted language (unlike C)\nCan enter commands at prompt &gt; or in batch\nComments are preceded by #\n\nThis is important to use often in your code for documentation\nYou’ll see it often in this course\n\nStatements are lines of code such as functions and object assignments\n\nEnters in code (as in a new line) or semi-colons will separate statements",
    "crumbs": [
      "Wranging Data",
      "Exploring and arranging data"
    ]
  },
  {
    "objectID": "wrangling/explore_arrange.html#libraries",
    "href": "wrangling/explore_arrange.html#libraries",
    "title": "Exploring and arranging data",
    "section": "Libraries",
    "text": "Libraries\nOne of the many benefits of R is that it is open source and free. This means users like you and me can create code that we use code that people in the data community created to make everyone’s lives easier.\nThese shared code snippets can help you do something as simple as combining spreadsheets in a folder or something as complicated as seasonally adjusting data in a time series.\nThey are organized in so-called packages or libraries.\nYou can do a lot of statistical analysis in R without any additional libraries— this is called base R.\nBut other users have created libraries with functions that solve common problems. R package users download only the libraries that they need for an individual project.\nTo get a list of all installed packages, go to the packages window or type library() in the console window. If the box in front of the package name is ticked in the packages window, the package is loaded and the functions within it are ready to be called.\nThere are many more packages available on the R website. If you want to install and use a package (for example, the packaged called “dplyr”) you should:\n\nInstall the package: click install packages in the packages window and type dplyr or type install.packages(\"dplyr\") in the console window.\nLoad the package: Check box in front of dplyr or type library(\"dplyr\") in the console window.",
    "crumbs": [
      "Wranging Data",
      "Exploring and arranging data"
    ]
  },
  {
    "objectID": "wrangling/explore_arrange.html#common-r-commands",
    "href": "wrangling/explore_arrange.html#common-r-commands",
    "title": "Exploring and arranging data",
    "section": "Common R commands",
    "text": "Common R commands\nR can be used as a calculator.\nJust type an equation in the console window after the &gt;\nIn those code sections, the code preceded by ## is the output of the code from the lines above.\nPlease type in 10^2 + 26 into the R environment below and click Run code.\n\n\n\n\n\n\n\n\n\n\n\n\nWorkspace\nYou can give numbers a name.\nBy doing so, they become so-called variables which can be used later.\nYou can assign values to an object name with either a = or &lt;-.\nThe command below sets 4 as a.\n\n\n\n\n\n\n\n\na is now saved up in the Environment tab in RStudio.\n\nYou can do calculations with a now.\nTry multiplying a with any number.\na * _\n\n\n\n\n\n\n\n\nIf you specify a again, it will forget what value you had before because you did not assign it to anything.\n\n\n\n\n\n\n\n\nYou can also assign a value to a using the old one\n\n\n\n\n\n\n\n\nTo remove all variables from R’s memory, type\n\n\n\n\n\n\n\n\nor click the “clear all” broom button in the work space window.",
    "crumbs": [
      "Wranging Data",
      "Exploring and arranging data"
    ]
  },
  {
    "objectID": "wrangling/explore_arrange.html#objects-in-r",
    "href": "wrangling/explore_arrange.html#objects-in-r",
    "title": "Exploring and arranging data",
    "section": "Objects in R",
    "text": "Objects in R\n\nScalars and vectors\nLike in many other programs, R organizes numbers in scalars (a single number 0-dimensional), vectors (a row of numbers, also called arrays - `-dimensional) and matrices (which we won’t get into now).\nThe a you defined was scalar.\nTo define a vector with the numbers 3,4, and 5, you need the function c() which is short for concatenate (or paste together).",
    "crumbs": [
      "Wranging Data",
      "Exploring and arranging data"
    ]
  },
  {
    "objectID": "wrangling/explore_arrange.html#functions",
    "href": "wrangling/explore_arrange.html#functions",
    "title": "Exploring and arranging data",
    "section": "Functions",
    "text": "Functions\nIf you would like to compute the mean of all the elements in the vector b from the example above, you could type\nPlease type out (300+4000+50)/3 in the code tester below:\n\n\n\n\n\n\nBut when the vector is very long, this is very boring and time-consuming work.\nFunctions do things to data. R is built on them. Some functions come with R, like median() or summary() and others come as part of packages that others have created.\nWhen you use a function to compute an average, you’ll type\n\nmean(x=b)\n\nWithin the brackets you specify the arguments.\nArguments give extra information to the function. In this case, the argument x says of which set of numbers (vector) the mean should computed (namely of b).\nSometimes the name of the argument is not necessary:\n\n\n\n\n\n\n\n\nAlso works.",
    "crumbs": [
      "Wranging Data",
      "Exploring and arranging data"
    ]
  },
  {
    "objectID": "wrangling/explore_arrange.html#plots",
    "href": "wrangling/explore_arrange.html#plots",
    "title": "Exploring and arranging data",
    "section": "Plots",
    "text": "Plots\nR can make simple graphics right away.\n\n\n\n\n\n\n\n\n\nIn the first line, 100 random numbers are assigned to the variable x, which becomes a vector by this operation.\nIn the second line, all these values are plotted in the plot window.",
    "crumbs": [
      "Wranging Data",
      "Exploring and arranging data"
    ]
  },
  {
    "objectID": "wrangling/explore_arrange.html#not-available-data",
    "href": "wrangling/explore_arrange.html#not-available-data",
    "title": "Exploring and arranging data",
    "section": "Not available data",
    "text": "Not available data\nWhen you work with real data, you will encounter missing values because instrumentation failed or human error.\nWhen a data is not available, you’ll often find an NA instead of a number.\n\n\n\n\n\n\n\n\nComputing statistics of incomplete data sets is strictly not possible.\nmaybe the largest value occurred during the weekend when you didn’t measure. Therefore, R will say that it doesn’t know what the largest value of j is\n\n\n\n\n\n\n\n\nIf you don’t mind about the missing data and want to compute the statistics anyway, you can add the argument na.rm=TRUE (Should I remove the NAs? Yes)\n\nmax(j, na.rm=T)\n\nNAs will also affect any sort of math if you’re not careful\n\n\n\n\n\n\n\n\nHere are some links on how to handle NAs in your data",
    "crumbs": [
      "Wranging Data",
      "Exploring and arranging data"
    ]
  },
  {
    "objectID": "wrangling/explore_arrange.html#base-r-versus-tidyverse",
    "href": "wrangling/explore_arrange.html#base-r-versus-tidyverse",
    "title": "Exploring and arranging data",
    "section": "Base R versus Tidyverse",
    "text": "Base R versus Tidyverse\nI will often mention “Base R” and “Tidyverse” throughout the course.\nBase R is what you get when you install R and don’t install anything extra.\nEverything you do in Tidyverse– the importing and wrangling of data, as well as the visualizations– can be done with Base R. It’s just older, the syntax is trickier, and it unfortunately has huge learning curve.\nFor the purposes of this class, you’ll learn just enough Base R to get things done but we’ll spend most of our time using functions in packages that have since been created by users to make our lives easier and have a good history of support from their creators.",
    "crumbs": [
      "Wranging Data",
      "Exploring and arranging data"
    ]
  },
  {
    "objectID": "wrangling/mutate_summarize.html",
    "href": "wrangling/mutate_summarize.html",
    "title": "Mutating and summarizing data",
    "section": "",
    "text": "mutable ok_reponse = (reponse, n) =&gt; { return html`Loading...` };\nviewof reponse = Inputs.radio(\n  new Map([\n    [\"First choice.\", 1],\n    [\"Second choice.\", 2],\n    [\"Third choice\", 3],\n    [\"Fourth choice.\", 4]\n  ])\n);\nok_reponse(reponse, 2);\nwelcome to class!",
    "crumbs": [
      "Wranging Data",
      "Mutating and summarizing data"
    ]
  },
  {
    "objectID": "wrangling/mutate_summarize.html#tour-of-r-and-rstudio",
    "href": "wrangling/mutate_summarize.html#tour-of-r-and-rstudio",
    "title": "Mutating and summarizing data",
    "section": "Tour of R and RStudio",
    "text": "Tour of R and RStudio\nR is just a programming language and can be open in any coding program like Sublime or Visual Code Studio. But we’re going to focus on using R in the environment known as RStudio because it easily shows all the different parts, like plots and objects, well.\nWhen you first open RStudio, the app is divided into three sections.\nMost sections have tabs for even more additional ways to view different sorts of things.\nThese sections can be customized and placed wherever you want through the RStudio menu options (if you’d rather the Files tab be in the top right instead of the top left, for example). Preferences &gt; Pane Layout\n\nThe tall section on the left is the console and that’s where you can type in R code to execute.\nThis code is also called commands or functions.\n\nIn the top right section, there’s the Environment tab where you can see the data or objects you are currently working on.\nAt first this section is empty because you have not loaded any data yet.\nThere’s also a tab in the top right section for History– this is where RStudio keeps track of the commands you run in the console.\n\nA viewer is on the bottom right, where there are tabs to flip through the Files and folder structure of your computer (like in Finder or Explorer), the Plots (diagrams) when they’ve been generated, your list of available R Packages, Help information etc.\n\nReproducibility: Save your scripts\nThere’s a difference between quick, on-the-fly analysis and analysis you want to rerun later on.\nThe code you type out and run in console can be copied and pasted and saved in scripts and R Markdown files. Scripts end with .R file extension and R Markdown files, which mixes both R code and Markdown code, end with .Rmd.\nR scripts versus R Markdown\nYou may hear mentions of “R Markdown” and that’s essentially the same thing as R scripts except with some enhanced formatting so that the code can be published as a pdf or a website or notebook. R scripts and R Markdown can only be opened by coding programs but the websites or PDFs generated by R Markdown can be open by non-programming people. It’s a means for communicating your results effectively to a wider audience. Compare the differences here and here.\nIn this course we’ll be alternating between typing code in the console and typing and saving code in a script. The code that’s disposable and written just for quick exploration can be and will be written in the console. Code we want to reuse and re purpose later on should be saved in a script.\n\nThese R source code files can be viewed in a Source section and pushes the console window down to accommodate.\nTo create a new script go through the menu File &gt; New File &gt; R Script or through the green plus button on the top left. This will expand the 3 windows in RStudio to 4. The script viewer will appear in the top left quadrant and push the console window into the lower left.\n\nThe file extensions for these files when saved ends with .R\nAny code we type in here can be run in the console. Hitting the Run button at the top of the script window will run the line of code on which the cursor is sitting.\nTo run multiple lines of code, highlight them and click Run.\n\nBe sure to save your scripts after you create them. And also save before running your code in case you write code that makes R crash– which will happen once in a while.",
    "crumbs": [
      "Wranging Data",
      "Mutating and summarizing data"
    ]
  },
  {
    "objectID": "wrangling/mutate_summarize.html#scripts",
    "href": "wrangling/mutate_summarize.html#scripts",
    "title": "Mutating and summarizing data",
    "section": "Scripts",
    "text": "Scripts\nR is an interpreter that uses a command line based environment.\nThis means that you have to type commands, rather than use the mouse and menus.\nThis has the advantage that you do not always have to retype commands.\nYou can store your commands in files, the so-called scripts. These scripts have typically file names with the extension .R as in script.R.\nYou can open an editor window to edit these files by clicking File &gt; New or File &gt; Open file…\nYou can run (send to the console window) part of the code by selecting lines and pressing CTRL+ENTER or CMD+ENTER or click the Run button at the top of the script editor window. If you do not select anything, R will run the line your cursor is on.\nYou can always run the whole script with the function source()\nFor example, to run the entire saved script.R if it’s in the root directory of the working directory, type\n\nsource(\"script.R\")\n\nYou can also click Run all in the editor window or type CTRL+SHIFT+S or CMD+SHIFT+S",
    "crumbs": [
      "Wranging Data",
      "Mutating and summarizing data"
    ]
  },
  {
    "objectID": "wrangling/mutate_summarize.html#project-directory-habits",
    "href": "wrangling/mutate_summarize.html#project-directory-habits",
    "title": "Mutating and summarizing data",
    "section": "Project directory habits",
    "text": "Project directory habits\nYour working directory is the folder on your computer in which you are currently working. When you ask R to open a certain file, it will look in the working directory for this file, and when you tell R to save a data file or figure, it will save it in the working directory.\nBefore you start working, please set your working directory to where all your data and script files are or should be stored.\nWhen you see code in a black box throughout this class, I want you to run that code in R unless noted otherwise. You can run it in the console, I’d prefer you do so in a script so you can see your history. In the video, you’ll see me swap back and forth between coding in the console and the script. This really depends on if I’m experimenting with code quickly or if it’s something I know I should track. Often I will copy and paste code executed from the console to growing script as an afterthought. Also, be sure to read the commented out code because I try to give additional context, like tips on what to do if the command fails.\nThis is an example of setting a working directory to a manual directory on your computer.\n\n# On a mac, it'd look like this\nsetwd(\"~/projects/learn-r-journalism\")\n\n# On a PC, it might look like this\nsetwd(\"C:/Documents/learn-r-journalism\")\n\nMake sure that slashes are forward slashes and that you don’t forget the quotation marks.\nWithin RStudio, you can also set the working directory via the menu Tools &gt; Set Working Directory\n\nThe commands above, setwd() was an example of setting an absolute folder.\nThis works for you for the purposes of this class, but if you wanted to share your methodology and script in the future or if you wanted to save run the code on another computer it would likely not work because it would be looking through a folder structure that doesn’t exist on any computer except the one where the original script was written. This is not ideal for reproducibility.\nWorking directories are a tough concept. If you’re curious about learning the BEST method for setting up directories for each project you’re working on, I’ve got some documentation.\nAlso, if you’re still curious, I follow this structure for all my R projects.",
    "crumbs": [
      "Wranging Data",
      "Mutating and summarizing data"
    ]
  },
  {
    "objectID": "wrangling/mutate_summarize.html#syntax",
    "href": "wrangling/mutate_summarize.html#syntax",
    "title": "Mutating and summarizing data",
    "section": "Syntax",
    "text": "Syntax\nYou must follow pretty specific syntax rules for it to work. R won’t guess for you.\n\n\nR is case-sensitive (unlike SQL) intepreted language (unlike C)\nCan enter commands at prompt &gt; or in batch\nComments are preceded by #\n\nThis is important to use often in your code for documentation\nYou’ll see it often in this course\n\nStatements are lines of code such as functions and object assignments\n\nEnters in code (as in a new line) or semi-colons will separate statements",
    "crumbs": [
      "Wranging Data",
      "Mutating and summarizing data"
    ]
  },
  {
    "objectID": "wrangling/mutate_summarize.html#libraries",
    "href": "wrangling/mutate_summarize.html#libraries",
    "title": "Mutating and summarizing data",
    "section": "Libraries",
    "text": "Libraries\nOne of the many benefits of R is that it is open source and free. This means users like you and me can create code that we use code that people in the data community created to make everyone’s lives easier.\nThese shared code snippets can help you do something as simple as combining spreadsheets in a folder or something as complicated as seasonally adjusting data in a time series.\nThey are organized in so-called packages or libraries.\nYou can do a lot of statistical analysis in R without any additional libraries— this is called base R.\nBut other users have created libraries with functions that solve common problems. R package users download only the libraries that they need for an individual project.\nTo get a list of all installed packages, go to the packages window or type library() in the console window. If the box in front of the package name is ticked in the packages window, the package is loaded and the functions within it are ready to be called.\nThere are many more packages available on the R website. If you want to install and use a package (for example, the packaged called “dplyr”) you should:\n\nInstall the package: click install packages in the packages window and type dplyr or type install.packages(\"dplyr\") in the console window.\nLoad the package: Check box in front of dplyr or type library(\"dplyr\") in the console window.",
    "crumbs": [
      "Wranging Data",
      "Mutating and summarizing data"
    ]
  },
  {
    "objectID": "wrangling/mutate_summarize.html#common-r-commands",
    "href": "wrangling/mutate_summarize.html#common-r-commands",
    "title": "Mutating and summarizing data",
    "section": "Common R commands",
    "text": "Common R commands\nR can be used as a calculator.\nJust type an equation in the console window after the &gt;\nIn those code sections, the code preceded by ## is the output of the code from the lines above.\nPlease type in 10^2 + 26 into the R environment below and click Run code.\n\n\n\n\n\n\n\n\n\n\n\n\nWorkspace\nYou can give numbers a name.\nBy doing so, they become so-called variables which can be used later.\nYou can assign values to an object name with either a = or &lt;-.\nThe command below sets 4 as a.\n\n\n\n\n\n\n\n\na is now saved up in the Environment tab in RStudio.\n\nYou can do calculations with a now.\nTry multiplying a with any number.\na * _\n\n\n\n\n\n\n\n\nIf you specify a again, it will forget what value you had before because you did not assign it to anything.\n\n\n\n\n\n\n\n\nYou can also assign a value to a using the old one\n\n\n\n\n\n\n\n\nTo remove all variables from R’s memory, type\n\n\n\n\n\n\n\n\nor click the “clear all” broom button in the work space window.",
    "crumbs": [
      "Wranging Data",
      "Mutating and summarizing data"
    ]
  },
  {
    "objectID": "wrangling/mutate_summarize.html#objects-in-r",
    "href": "wrangling/mutate_summarize.html#objects-in-r",
    "title": "Mutating and summarizing data",
    "section": "Objects in R",
    "text": "Objects in R\n\nScalars and vectors\nLike in many other programs, R organizes numbers in scalars (a single number 0-dimensional), vectors (a row of numbers, also called arrays - `-dimensional) and matrices (which we won’t get into now).\nThe a you defined was scalar.\nTo define a vector with the numbers 3,4, and 5, you need the function c() which is short for concatenate (or paste together).",
    "crumbs": [
      "Wranging Data",
      "Mutating and summarizing data"
    ]
  },
  {
    "objectID": "wrangling/mutate_summarize.html#functions",
    "href": "wrangling/mutate_summarize.html#functions",
    "title": "Mutating and summarizing data",
    "section": "Functions",
    "text": "Functions\nIf you would like to compute the mean of all the elements in the vector b from the example above, you could type\nPlease type out (300+4000+50)/3 in the code tester below:\n\n\n\n\n\n\nBut when the vector is very long, this is very boring and time-consuming work.\nFunctions do things to data. R is built on them. Some functions come with R, like median() or summary() and others come as part of packages that others have created.\nWhen you use a function to compute an average, you’ll type\n\nmean(x=b)\n\nWithin the brackets you specify the arguments.\nArguments give extra information to the function. In this case, the argument x says of which set of numbers (vector) the mean should computed (namely of b).\nSometimes the name of the argument is not necessary:\n\n\n\n\n\n\n\n\nAlso works.",
    "crumbs": [
      "Wranging Data",
      "Mutating and summarizing data"
    ]
  },
  {
    "objectID": "wrangling/mutate_summarize.html#plots",
    "href": "wrangling/mutate_summarize.html#plots",
    "title": "Mutating and summarizing data",
    "section": "Plots",
    "text": "Plots\nR can make simple graphics right away.\n\n\n\n\n\n\n\n\n\nIn the first line, 100 random numbers are assigned to the variable x, which becomes a vector by this operation.\nIn the second line, all these values are plotted in the plot window.",
    "crumbs": [
      "Wranging Data",
      "Mutating and summarizing data"
    ]
  },
  {
    "objectID": "wrangling/mutate_summarize.html#not-available-data",
    "href": "wrangling/mutate_summarize.html#not-available-data",
    "title": "Mutating and summarizing data",
    "section": "Not available data",
    "text": "Not available data\nWhen you work with real data, you will encounter missing values because instrumentation failed or human error.\nWhen a data is not available, you’ll often find an NA instead of a number.\n\n\n\n\n\n\n\n\nComputing statistics of incomplete data sets is strictly not possible.\nmaybe the largest value occurred during the weekend when you didn’t measure. Therefore, R will say that it doesn’t know what the largest value of j is\n\n\n\n\n\n\n\n\nIf you don’t mind about the missing data and want to compute the statistics anyway, you can add the argument na.rm=TRUE (Should I remove the NAs? Yes)\n\nmax(j, na.rm=T)\n\nNAs will also affect any sort of math if you’re not careful\n\n\n\n\n\n\n\n\nHere are some links on how to handle NAs in your data",
    "crumbs": [
      "Wranging Data",
      "Mutating and summarizing data"
    ]
  },
  {
    "objectID": "wrangling/mutate_summarize.html#base-r-versus-tidyverse",
    "href": "wrangling/mutate_summarize.html#base-r-versus-tidyverse",
    "title": "Mutating and summarizing data",
    "section": "Base R versus Tidyverse",
    "text": "Base R versus Tidyverse\nI will often mention “Base R” and “Tidyverse” throughout the course.\nBase R is what you get when you install R and don’t install anything extra.\nEverything you do in Tidyverse– the importing and wrangling of data, as well as the visualizations– can be done with Base R. It’s just older, the syntax is trickier, and it unfortunately has huge learning curve.\nFor the purposes of this class, you’ll learn just enough Base R to get things done but we’ll spend most of our time using functions in packages that have since been created by users to make our lives easier and have a good history of support from their creators.",
    "crumbs": [
      "Wranging Data",
      "Mutating and summarizing data"
    ]
  },
  {
    "objectID": "visualizing/exploratory_viz.html",
    "href": "visualizing/exploratory_viz.html",
    "title": "Exploratory data visualization",
    "section": "",
    "text": "mutable ok_reponse = (reponse, n) =&gt; { return html`Loading...` };\nviewof reponse = Inputs.radio(\n  new Map([\n    [\"First choice.\", 1],\n    [\"Second choice.\", 2],\n    [\"Third choice\", 3],\n    [\"Fourth choice.\", 4]\n  ])\n);\nok_reponse(reponse, 2);\nwelcome to class!",
    "crumbs": [
      "Visualizing Data",
      "Exploratory data visualization"
    ]
  },
  {
    "objectID": "visualizing/exploratory_viz.html#tour-of-r-and-rstudio",
    "href": "visualizing/exploratory_viz.html#tour-of-r-and-rstudio",
    "title": "Exploratory data visualization",
    "section": "Tour of R and RStudio",
    "text": "Tour of R and RStudio\nR is just a programming language and can be open in any coding program like Sublime or Visual Code Studio. But we’re going to focus on using R in the environment known as RStudio because it easily shows all the different parts, like plots and objects, well.\nWhen you first open RStudio, the app is divided into three sections.\nMost sections have tabs for even more additional ways to view different sorts of things.\nThese sections can be customized and placed wherever you want through the RStudio menu options (if you’d rather the Files tab be in the top right instead of the top left, for example). Preferences &gt; Pane Layout\n\nThe tall section on the left is the console and that’s where you can type in R code to execute.\nThis code is also called commands or functions.\n\nIn the top right section, there’s the Environment tab where you can see the data or objects you are currently working on.\nAt first this section is empty because you have not loaded any data yet.\nThere’s also a tab in the top right section for History– this is where RStudio keeps track of the commands you run in the console.\n\nA viewer is on the bottom right, where there are tabs to flip through the Files and folder structure of your computer (like in Finder or Explorer), the Plots (diagrams) when they’ve been generated, your list of available R Packages, Help information etc.\n\nReproducibility: Save your scripts\nThere’s a difference between quick, on-the-fly analysis and analysis you want to rerun later on.\nThe code you type out and run in console can be copied and pasted and saved in scripts and R Markdown files. Scripts end with .R file extension and R Markdown files, which mixes both R code and Markdown code, end with .Rmd.\nR scripts versus R Markdown\nYou may hear mentions of “R Markdown” and that’s essentially the same thing as R scripts except with some enhanced formatting so that the code can be published as a pdf or a website or notebook. R scripts and R Markdown can only be opened by coding programs but the websites or PDFs generated by R Markdown can be open by non-programming people. It’s a means for communicating your results effectively to a wider audience. Compare the differences here and here.\nIn this course we’ll be alternating between typing code in the console and typing and saving code in a script. The code that’s disposable and written just for quick exploration can be and will be written in the console. Code we want to reuse and re purpose later on should be saved in a script.\n\nThese R source code files can be viewed in a Source section and pushes the console window down to accommodate.\nTo create a new script go through the menu File &gt; New File &gt; R Script or through the green plus button on the top left. This will expand the 3 windows in RStudio to 4. The script viewer will appear in the top left quadrant and push the console window into the lower left.\n\nThe file extensions for these files when saved ends with .R\nAny code we type in here can be run in the console. Hitting the Run button at the top of the script window will run the line of code on which the cursor is sitting.\nTo run multiple lines of code, highlight them and click Run.\n\nBe sure to save your scripts after you create them. And also save before running your code in case you write code that makes R crash– which will happen once in a while.",
    "crumbs": [
      "Visualizing Data",
      "Exploratory data visualization"
    ]
  },
  {
    "objectID": "visualizing/exploratory_viz.html#scripts",
    "href": "visualizing/exploratory_viz.html#scripts",
    "title": "Exploratory data visualization",
    "section": "Scripts",
    "text": "Scripts\nR is an interpreter that uses a command line based environment.\nThis means that you have to type commands, rather than use the mouse and menus.\nThis has the advantage that you do not always have to retype commands.\nYou can store your commands in files, the so-called scripts. These scripts have typically file names with the extension .R as in script.R.\nYou can open an editor window to edit these files by clicking File &gt; New or File &gt; Open file…\nYou can run (send to the console window) part of the code by selecting lines and pressing CTRL+ENTER or CMD+ENTER or click the Run button at the top of the script editor window. If you do not select anything, R will run the line your cursor is on.\nYou can always run the whole script with the function source()\nFor example, to run the entire saved script.R if it’s in the root directory of the working directory, type\n\nsource(\"script.R\")\n\nYou can also click Run all in the editor window or type CTRL+SHIFT+S or CMD+SHIFT+S",
    "crumbs": [
      "Visualizing Data",
      "Exploratory data visualization"
    ]
  },
  {
    "objectID": "visualizing/exploratory_viz.html#project-directory-habits",
    "href": "visualizing/exploratory_viz.html#project-directory-habits",
    "title": "Exploratory data visualization",
    "section": "Project directory habits",
    "text": "Project directory habits\nYour working directory is the folder on your computer in which you are currently working. When you ask R to open a certain file, it will look in the working directory for this file, and when you tell R to save a data file or figure, it will save it in the working directory.\nBefore you start working, please set your working directory to where all your data and script files are or should be stored.\nWhen you see code in a black box throughout this class, I want you to run that code in R unless noted otherwise. You can run it in the console, I’d prefer you do so in a script so you can see your history. In the video, you’ll see me swap back and forth between coding in the console and the script. This really depends on if I’m experimenting with code quickly or if it’s something I know I should track. Often I will copy and paste code executed from the console to growing script as an afterthought. Also, be sure to read the commented out code because I try to give additional context, like tips on what to do if the command fails.\nThis is an example of setting a working directory to a manual directory on your computer.\n\n# On a mac, it'd look like this\nsetwd(\"~/projects/learn-r-journalism\")\n\n# On a PC, it might look like this\nsetwd(\"C:/Documents/learn-r-journalism\")\n\nMake sure that slashes are forward slashes and that you don’t forget the quotation marks.\nWithin RStudio, you can also set the working directory via the menu Tools &gt; Set Working Directory\n\nThe commands above, setwd() was an example of setting an absolute folder.\nThis works for you for the purposes of this class, but if you wanted to share your methodology and script in the future or if you wanted to save run the code on another computer it would likely not work because it would be looking through a folder structure that doesn’t exist on any computer except the one where the original script was written. This is not ideal for reproducibility.\nWorking directories are a tough concept. If you’re curious about learning the BEST method for setting up directories for each project you’re working on, I’ve got some documentation.\nAlso, if you’re still curious, I follow this structure for all my R projects.",
    "crumbs": [
      "Visualizing Data",
      "Exploratory data visualization"
    ]
  },
  {
    "objectID": "visualizing/exploratory_viz.html#syntax",
    "href": "visualizing/exploratory_viz.html#syntax",
    "title": "Exploratory data visualization",
    "section": "Syntax",
    "text": "Syntax\nYou must follow pretty specific syntax rules for it to work. R won’t guess for you.\n\n\nR is case-sensitive (unlike SQL) intepreted language (unlike C)\nCan enter commands at prompt &gt; or in batch\nComments are preceded by #\n\nThis is important to use often in your code for documentation\nYou’ll see it often in this course\n\nStatements are lines of code such as functions and object assignments\n\nEnters in code (as in a new line) or semi-colons will separate statements",
    "crumbs": [
      "Visualizing Data",
      "Exploratory data visualization"
    ]
  },
  {
    "objectID": "visualizing/exploratory_viz.html#libraries",
    "href": "visualizing/exploratory_viz.html#libraries",
    "title": "Exploratory data visualization",
    "section": "Libraries",
    "text": "Libraries\nOne of the many benefits of R is that it is open source and free. This means users like you and me can create code that we use code that people in the data community created to make everyone’s lives easier.\nThese shared code snippets can help you do something as simple as combining spreadsheets in a folder or something as complicated as seasonally adjusting data in a time series.\nThey are organized in so-called packages or libraries.\nYou can do a lot of statistical analysis in R without any additional libraries— this is called base R.\nBut other users have created libraries with functions that solve common problems. R package users download only the libraries that they need for an individual project.\nTo get a list of all installed packages, go to the packages window or type library() in the console window. If the box in front of the package name is ticked in the packages window, the package is loaded and the functions within it are ready to be called.\nThere are many more packages available on the R website. If you want to install and use a package (for example, the packaged called “dplyr”) you should:\n\nInstall the package: click install packages in the packages window and type dplyr or type install.packages(\"dplyr\") in the console window.\nLoad the package: Check box in front of dplyr or type library(\"dplyr\") in the console window.",
    "crumbs": [
      "Visualizing Data",
      "Exploratory data visualization"
    ]
  },
  {
    "objectID": "visualizing/exploratory_viz.html#common-r-commands",
    "href": "visualizing/exploratory_viz.html#common-r-commands",
    "title": "Exploratory data visualization",
    "section": "Common R commands",
    "text": "Common R commands\nR can be used as a calculator.\nJust type an equation in the console window after the &gt;\nIn those code sections, the code preceded by ## is the output of the code from the lines above.\nPlease type in 10^2 + 26 into the R environment below and click Run code.\n\n\n\n\n\n\n\n\n\n\n\n\nWorkspace\nYou can give numbers a name.\nBy doing so, they become so-called variables which can be used later.\nYou can assign values to an object name with either a = or &lt;-.\nThe command below sets 4 as a.\n\n\n\n\n\n\n\n\na is now saved up in the Environment tab in RStudio.\n\nYou can do calculations with a now.\nTry multiplying a with any number.\na * _\n\n\n\n\n\n\n\n\nIf you specify a again, it will forget what value you had before because you did not assign it to anything.\n\n\n\n\n\n\n\n\nYou can also assign a value to a using the old one\n\n\n\n\n\n\n\n\nTo remove all variables from R’s memory, type\n\n\n\n\n\n\n\n\nor click the “clear all” broom button in the work space window.",
    "crumbs": [
      "Visualizing Data",
      "Exploratory data visualization"
    ]
  },
  {
    "objectID": "visualizing/exploratory_viz.html#objects-in-r",
    "href": "visualizing/exploratory_viz.html#objects-in-r",
    "title": "Exploratory data visualization",
    "section": "Objects in R",
    "text": "Objects in R\n\nScalars and vectors\nLike in many other programs, R organizes numbers in scalars (a single number 0-dimensional), vectors (a row of numbers, also called arrays - `-dimensional) and matrices (which we won’t get into now).\nThe a you defined was scalar.\nTo define a vector with the numbers 3,4, and 5, you need the function c() which is short for concatenate (or paste together).",
    "crumbs": [
      "Visualizing Data",
      "Exploratory data visualization"
    ]
  },
  {
    "objectID": "visualizing/exploratory_viz.html#functions",
    "href": "visualizing/exploratory_viz.html#functions",
    "title": "Exploratory data visualization",
    "section": "Functions",
    "text": "Functions\nIf you would like to compute the mean of all the elements in the vector b from the example above, you could type\nPlease type out (300+4000+50)/3 in the code tester below:\n\n\n\n\n\n\nBut when the vector is very long, this is very boring and time-consuming work.\nFunctions do things to data. R is built on them. Some functions come with R, like median() or summary() and others come as part of packages that others have created.\nWhen you use a function to compute an average, you’ll type\n\nmean(x=b)\n\nWithin the brackets you specify the arguments.\nArguments give extra information to the function. In this case, the argument x says of which set of numbers (vector) the mean should computed (namely of b).\nSometimes the name of the argument is not necessary:\n\n\n\n\n\n\n\n\nAlso works.",
    "crumbs": [
      "Visualizing Data",
      "Exploratory data visualization"
    ]
  },
  {
    "objectID": "visualizing/exploratory_viz.html#plots",
    "href": "visualizing/exploratory_viz.html#plots",
    "title": "Exploratory data visualization",
    "section": "Plots",
    "text": "Plots\nR can make simple graphics right away.\n\n\n\n\n\n\n\n\n\nIn the first line, 100 random numbers are assigned to the variable x, which becomes a vector by this operation.\nIn the second line, all these values are plotted in the plot window.",
    "crumbs": [
      "Visualizing Data",
      "Exploratory data visualization"
    ]
  },
  {
    "objectID": "visualizing/exploratory_viz.html#not-available-data",
    "href": "visualizing/exploratory_viz.html#not-available-data",
    "title": "Exploratory data visualization",
    "section": "Not available data",
    "text": "Not available data\nWhen you work with real data, you will encounter missing values because instrumentation failed or human error.\nWhen a data is not available, you’ll often find an NA instead of a number.\n\n\n\n\n\n\n\n\nComputing statistics of incomplete data sets is strictly not possible.\nmaybe the largest value occurred during the weekend when you didn’t measure. Therefore, R will say that it doesn’t know what the largest value of j is\n\n\n\n\n\n\n\n\nIf you don’t mind about the missing data and want to compute the statistics anyway, you can add the argument na.rm=TRUE (Should I remove the NAs? Yes)\n\nmax(j, na.rm=T)\n\nNAs will also affect any sort of math if you’re not careful\n\n\n\n\n\n\n\n\nHere are some links on how to handle NAs in your data",
    "crumbs": [
      "Visualizing Data",
      "Exploratory data visualization"
    ]
  },
  {
    "objectID": "visualizing/exploratory_viz.html#base-r-versus-tidyverse",
    "href": "visualizing/exploratory_viz.html#base-r-versus-tidyverse",
    "title": "Exploratory data visualization",
    "section": "Base R versus Tidyverse",
    "text": "Base R versus Tidyverse\nI will often mention “Base R” and “Tidyverse” throughout the course.\nBase R is what you get when you install R and don’t install anything extra.\nEverything you do in Tidyverse– the importing and wrangling of data, as well as the visualizations– can be done with Base R. It’s just older, the syntax is trickier, and it unfortunately has huge learning curve.\nFor the purposes of this class, you’ll learn just enough Base R to get things done but we’ll spend most of our time using functions in packages that have since been created by users to make our lives easier and have a good history of support from their creators.",
    "crumbs": [
      "Visualizing Data",
      "Exploratory data visualization"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "tidying/joining.html",
    "href": "tidying/joining.html",
    "title": "Joining data",
    "section": "",
    "text": "mutable ok_reponse = (reponse, n) =&gt; { return html`Loading...` };\nviewof reponse = Inputs.radio(\n  new Map([\n    [\"First choice.\", 1],\n    [\"Second choice.\", 2],\n    [\"Third choice\", 3],\n    [\"Fourth choice.\", 4]\n  ])\n);\nok_reponse(reponse, 2);\nwelcome to class!",
    "crumbs": [
      "Tidying Data",
      "Joining data"
    ]
  },
  {
    "objectID": "tidying/joining.html#tour-of-r-and-rstudio",
    "href": "tidying/joining.html#tour-of-r-and-rstudio",
    "title": "Joining data",
    "section": "Tour of R and RStudio",
    "text": "Tour of R and RStudio\nR is just a programming language and can be open in any coding program like Sublime or Visual Code Studio. But we’re going to focus on using R in the environment known as RStudio because it easily shows all the different parts, like plots and objects, well.\nWhen you first open RStudio, the app is divided into three sections.\nMost sections have tabs for even more additional ways to view different sorts of things.\nThese sections can be customized and placed wherever you want through the RStudio menu options (if you’d rather the Files tab be in the top right instead of the top left, for example). Preferences &gt; Pane Layout\n\nThe tall section on the left is the console and that’s where you can type in R code to execute.\nThis code is also called commands or functions.\n\nIn the top right section, there’s the Environment tab where you can see the data or objects you are currently working on.\nAt first this section is empty because you have not loaded any data yet.\nThere’s also a tab in the top right section for History– this is where RStudio keeps track of the commands you run in the console.\n\nA viewer is on the bottom right, where there are tabs to flip through the Files and folder structure of your computer (like in Finder or Explorer), the Plots (diagrams) when they’ve been generated, your list of available R Packages, Help information etc.\n\nReproducibility: Save your scripts\nThere’s a difference between quick, on-the-fly analysis and analysis you want to rerun later on.\nThe code you type out and run in console can be copied and pasted and saved in scripts and R Markdown files. Scripts end with .R file extension and R Markdown files, which mixes both R code and Markdown code, end with .Rmd.\nR scripts versus R Markdown\nYou may hear mentions of “R Markdown” and that’s essentially the same thing as R scripts except with some enhanced formatting so that the code can be published as a pdf or a website or notebook. R scripts and R Markdown can only be opened by coding programs but the websites or PDFs generated by R Markdown can be open by non-programming people. It’s a means for communicating your results effectively to a wider audience. Compare the differences here and here.\nIn this course we’ll be alternating between typing code in the console and typing and saving code in a script. The code that’s disposable and written just for quick exploration can be and will be written in the console. Code we want to reuse and re purpose later on should be saved in a script.\n\nThese R source code files can be viewed in a Source section and pushes the console window down to accommodate.\nTo create a new script go through the menu File &gt; New File &gt; R Script or through the green plus button on the top left. This will expand the 3 windows in RStudio to 4. The script viewer will appear in the top left quadrant and push the console window into the lower left.\n\nThe file extensions for these files when saved ends with .R\nAny code we type in here can be run in the console. Hitting the Run button at the top of the script window will run the line of code on which the cursor is sitting.\nTo run multiple lines of code, highlight them and click Run.\n\nBe sure to save your scripts after you create them. And also save before running your code in case you write code that makes R crash– which will happen once in a while.",
    "crumbs": [
      "Tidying Data",
      "Joining data"
    ]
  },
  {
    "objectID": "tidying/joining.html#scripts",
    "href": "tidying/joining.html#scripts",
    "title": "Joining data",
    "section": "Scripts",
    "text": "Scripts\nR is an interpreter that uses a command line based environment.\nThis means that you have to type commands, rather than use the mouse and menus.\nThis has the advantage that you do not always have to retype commands.\nYou can store your commands in files, the so-called scripts. These scripts have typically file names with the extension .R as in script.R.\nYou can open an editor window to edit these files by clicking File &gt; New or File &gt; Open file…\nYou can run (send to the console window) part of the code by selecting lines and pressing CTRL+ENTER or CMD+ENTER or click the Run button at the top of the script editor window. If you do not select anything, R will run the line your cursor is on.\nYou can always run the whole script with the function source()\nFor example, to run the entire saved script.R if it’s in the root directory of the working directory, type\n\nsource(\"script.R\")\n\nYou can also click Run all in the editor window or type CTRL+SHIFT+S or CMD+SHIFT+S",
    "crumbs": [
      "Tidying Data",
      "Joining data"
    ]
  },
  {
    "objectID": "tidying/joining.html#project-directory-habits",
    "href": "tidying/joining.html#project-directory-habits",
    "title": "Joining data",
    "section": "Project directory habits",
    "text": "Project directory habits\nYour working directory is the folder on your computer in which you are currently working. When you ask R to open a certain file, it will look in the working directory for this file, and when you tell R to save a data file or figure, it will save it in the working directory.\nBefore you start working, please set your working directory to where all your data and script files are or should be stored.\nWhen you see code in a black box throughout this class, I want you to run that code in R unless noted otherwise. You can run it in the console, I’d prefer you do so in a script so you can see your history. In the video, you’ll see me swap back and forth between coding in the console and the script. This really depends on if I’m experimenting with code quickly or if it’s something I know I should track. Often I will copy and paste code executed from the console to growing script as an afterthought. Also, be sure to read the commented out code because I try to give additional context, like tips on what to do if the command fails.\nThis is an example of setting a working directory to a manual directory on your computer.\n\n# On a mac, it'd look like this\nsetwd(\"~/projects/learn-r-journalism\")\n\n# On a PC, it might look like this\nsetwd(\"C:/Documents/learn-r-journalism\")\n\nMake sure that slashes are forward slashes and that you don’t forget the quotation marks.\nWithin RStudio, you can also set the working directory via the menu Tools &gt; Set Working Directory\n\nThe commands above, setwd() was an example of setting an absolute folder.\nThis works for you for the purposes of this class, but if you wanted to share your methodology and script in the future or if you wanted to save run the code on another computer it would likely not work because it would be looking through a folder structure that doesn’t exist on any computer except the one where the original script was written. This is not ideal for reproducibility.\nWorking directories are a tough concept. If you’re curious about learning the BEST method for setting up directories for each project you’re working on, I’ve got some documentation.\nAlso, if you’re still curious, I follow this structure for all my R projects.",
    "crumbs": [
      "Tidying Data",
      "Joining data"
    ]
  },
  {
    "objectID": "tidying/joining.html#syntax",
    "href": "tidying/joining.html#syntax",
    "title": "Joining data",
    "section": "Syntax",
    "text": "Syntax\nYou must follow pretty specific syntax rules for it to work. R won’t guess for you.\n\n\nR is case-sensitive (unlike SQL) intepreted language (unlike C)\nCan enter commands at prompt &gt; or in batch\nComments are preceded by #\n\nThis is important to use often in your code for documentation\nYou’ll see it often in this course\n\nStatements are lines of code such as functions and object assignments\n\nEnters in code (as in a new line) or semi-colons will separate statements",
    "crumbs": [
      "Tidying Data",
      "Joining data"
    ]
  },
  {
    "objectID": "tidying/joining.html#libraries",
    "href": "tidying/joining.html#libraries",
    "title": "Joining data",
    "section": "Libraries",
    "text": "Libraries\nOne of the many benefits of R is that it is open source and free. This means users like you and me can create code that we use code that people in the data community created to make everyone’s lives easier.\nThese shared code snippets can help you do something as simple as combining spreadsheets in a folder or something as complicated as seasonally adjusting data in a time series.\nThey are organized in so-called packages or libraries.\nYou can do a lot of statistical analysis in R without any additional libraries— this is called base R.\nBut other users have created libraries with functions that solve common problems. R package users download only the libraries that they need for an individual project.\nTo get a list of all installed packages, go to the packages window or type library() in the console window. If the box in front of the package name is ticked in the packages window, the package is loaded and the functions within it are ready to be called.\nThere are many more packages available on the R website. If you want to install and use a package (for example, the packaged called “dplyr”) you should:\n\nInstall the package: click install packages in the packages window and type dplyr or type install.packages(\"dplyr\") in the console window.\nLoad the package: Check box in front of dplyr or type library(\"dplyr\") in the console window.",
    "crumbs": [
      "Tidying Data",
      "Joining data"
    ]
  },
  {
    "objectID": "tidying/joining.html#common-r-commands",
    "href": "tidying/joining.html#common-r-commands",
    "title": "Joining data",
    "section": "Common R commands",
    "text": "Common R commands\nR can be used as a calculator.\nJust type an equation in the console window after the &gt;\nIn those code sections, the code preceded by ## is the output of the code from the lines above.\nPlease type in 10^2 + 26 into the R environment below and click Run code.\n\n\n\n\n\n\n\n\n\n\n\n\nWorkspace\nYou can give numbers a name.\nBy doing so, they become so-called variables which can be used later.\nYou can assign values to an object name with either a = or &lt;-.\nThe command below sets 4 as a.\n\n\n\n\n\n\n\n\na is now saved up in the Environment tab in RStudio.\n\nYou can do calculations with a now.\nTry multiplying a with any number.\na * _\n\n\n\n\n\n\n\n\nIf you specify a again, it will forget what value you had before because you did not assign it to anything.\n\n\n\n\n\n\n\n\nYou can also assign a value to a using the old one\n\n\n\n\n\n\n\n\nTo remove all variables from R’s memory, type\n\n\n\n\n\n\n\n\nor click the “clear all” broom button in the work space window.",
    "crumbs": [
      "Tidying Data",
      "Joining data"
    ]
  },
  {
    "objectID": "tidying/joining.html#objects-in-r",
    "href": "tidying/joining.html#objects-in-r",
    "title": "Joining data",
    "section": "Objects in R",
    "text": "Objects in R\n\nScalars and vectors\nLike in many other programs, R organizes numbers in scalars (a single number 0-dimensional), vectors (a row of numbers, also called arrays - `-dimensional) and matrices (which we won’t get into now).\nThe a you defined was scalar.\nTo define a vector with the numbers 3,4, and 5, you need the function c() which is short for concatenate (or paste together).",
    "crumbs": [
      "Tidying Data",
      "Joining data"
    ]
  },
  {
    "objectID": "tidying/joining.html#functions",
    "href": "tidying/joining.html#functions",
    "title": "Joining data",
    "section": "Functions",
    "text": "Functions\nIf you would like to compute the mean of all the elements in the vector b from the example above, you could type\nPlease type out (300+4000+50)/3 in the code tester below:\n\n\n\n\n\n\nBut when the vector is very long, this is very boring and time-consuming work.\nFunctions do things to data. R is built on them. Some functions come with R, like median() or summary() and others come as part of packages that others have created.\nWhen you use a function to compute an average, you’ll type\n\nmean(x=b)\n\nWithin the brackets you specify the arguments.\nArguments give extra information to the function. In this case, the argument x says of which set of numbers (vector) the mean should computed (namely of b).\nSometimes the name of the argument is not necessary:\n\n\n\n\n\n\n\n\nAlso works.",
    "crumbs": [
      "Tidying Data",
      "Joining data"
    ]
  },
  {
    "objectID": "tidying/joining.html#plots",
    "href": "tidying/joining.html#plots",
    "title": "Joining data",
    "section": "Plots",
    "text": "Plots\nR can make simple graphics right away.\n\n\n\n\n\n\n\n\n\nIn the first line, 100 random numbers are assigned to the variable x, which becomes a vector by this operation.\nIn the second line, all these values are plotted in the plot window.",
    "crumbs": [
      "Tidying Data",
      "Joining data"
    ]
  },
  {
    "objectID": "tidying/joining.html#not-available-data",
    "href": "tidying/joining.html#not-available-data",
    "title": "Joining data",
    "section": "Not available data",
    "text": "Not available data\nWhen you work with real data, you will encounter missing values because instrumentation failed or human error.\nWhen a data is not available, you’ll often find an NA instead of a number.\n\n\n\n\n\n\n\n\nComputing statistics of incomplete data sets is strictly not possible.\nmaybe the largest value occurred during the weekend when you didn’t measure. Therefore, R will say that it doesn’t know what the largest value of j is\n\n\n\n\n\n\n\n\nIf you don’t mind about the missing data and want to compute the statistics anyway, you can add the argument na.rm=TRUE (Should I remove the NAs? Yes)\n\nmax(j, na.rm=T)\n\nNAs will also affect any sort of math if you’re not careful\n\n\n\n\n\n\n\n\nHere are some links on how to handle NAs in your data",
    "crumbs": [
      "Tidying Data",
      "Joining data"
    ]
  },
  {
    "objectID": "tidying/joining.html#base-r-versus-tidyverse",
    "href": "tidying/joining.html#base-r-versus-tidyverse",
    "title": "Joining data",
    "section": "Base R versus Tidyverse",
    "text": "Base R versus Tidyverse\nI will often mention “Base R” and “Tidyverse” throughout the course.\nBase R is what you get when you install R and don’t install anything extra.\nEverything you do in Tidyverse– the importing and wrangling of data, as well as the visualizations– can be done with Base R. It’s just older, the syntax is trickier, and it unfortunately has huge learning curve.\nFor the purposes of this class, you’ll learn just enough Base R to get things done but we’ll spend most of our time using functions in packages that have since been created by users to make our lives easier and have a good history of support from their creators.",
    "crumbs": [
      "Tidying Data",
      "Joining data"
    ]
  },
  {
    "objectID": "tidying/math_pivots.html",
    "href": "tidying/math_pivots.html",
    "title": "Pivoting data",
    "section": "",
    "text": "mutable ok_reponse = (reponse, n) =&gt; { return html`Loading...` };\nviewof reponse = Inputs.radio(\n  new Map([\n    [\"First choice.\", 1],\n    [\"Second choice.\", 2],\n    [\"Third choice\", 3],\n    [\"Fourth choice.\", 4]\n  ])\n);\nok_reponse(reponse, 2);\nwelcome to class!",
    "crumbs": [
      "Tidying Data",
      "Pivoting data"
    ]
  },
  {
    "objectID": "tidying/math_pivots.html#tour-of-r-and-rstudio",
    "href": "tidying/math_pivots.html#tour-of-r-and-rstudio",
    "title": "Pivoting data",
    "section": "Tour of R and RStudio",
    "text": "Tour of R and RStudio\nR is just a programming language and can be open in any coding program like Sublime or Visual Code Studio. But we’re going to focus on using R in the environment known as RStudio because it easily shows all the different parts, like plots and objects, well.\nWhen you first open RStudio, the app is divided into three sections.\nMost sections have tabs for even more additional ways to view different sorts of things.\nThese sections can be customized and placed wherever you want through the RStudio menu options (if you’d rather the Files tab be in the top right instead of the top left, for example). Preferences &gt; Pane Layout\n\nThe tall section on the left is the console and that’s where you can type in R code to execute.\nThis code is also called commands or functions.\n\nIn the top right section, there’s the Environment tab where you can see the data or objects you are currently working on.\nAt first this section is empty because you have not loaded any data yet.\nThere’s also a tab in the top right section for History– this is where RStudio keeps track of the commands you run in the console.\n\nA viewer is on the bottom right, where there are tabs to flip through the Files and folder structure of your computer (like in Finder or Explorer), the Plots (diagrams) when they’ve been generated, your list of available R Packages, Help information etc.\n\nReproducibility: Save your scripts\nThere’s a difference between quick, on-the-fly analysis and analysis you want to rerun later on.\nThe code you type out and run in console can be copied and pasted and saved in scripts and R Markdown files. Scripts end with .R file extension and R Markdown files, which mixes both R code and Markdown code, end with .Rmd.\nR scripts versus R Markdown\nYou may hear mentions of “R Markdown” and that’s essentially the same thing as R scripts except with some enhanced formatting so that the code can be published as a pdf or a website or notebook. R scripts and R Markdown can only be opened by coding programs but the websites or PDFs generated by R Markdown can be open by non-programming people. It’s a means for communicating your results effectively to a wider audience. Compare the differences here and here.\nIn this course we’ll be alternating between typing code in the console and typing and saving code in a script. The code that’s disposable and written just for quick exploration can be and will be written in the console. Code we want to reuse and re purpose later on should be saved in a script.\n\nThese R source code files can be viewed in a Source section and pushes the console window down to accommodate.\nTo create a new script go through the menu File &gt; New File &gt; R Script or through the green plus button on the top left. This will expand the 3 windows in RStudio to 4. The script viewer will appear in the top left quadrant and push the console window into the lower left.\n\nThe file extensions for these files when saved ends with .R\nAny code we type in here can be run in the console. Hitting the Run button at the top of the script window will run the line of code on which the cursor is sitting.\nTo run multiple lines of code, highlight them and click Run.\n\nBe sure to save your scripts after you create them. And also save before running your code in case you write code that makes R crash– which will happen once in a while.",
    "crumbs": [
      "Tidying Data",
      "Pivoting data"
    ]
  },
  {
    "objectID": "tidying/math_pivots.html#scripts",
    "href": "tidying/math_pivots.html#scripts",
    "title": "Pivoting data",
    "section": "Scripts",
    "text": "Scripts\nR is an interpreter that uses a command line based environment.\nThis means that you have to type commands, rather than use the mouse and menus.\nThis has the advantage that you do not always have to retype commands.\nYou can store your commands in files, the so-called scripts. These scripts have typically file names with the extension .R as in script.R.\nYou can open an editor window to edit these files by clicking File &gt; New or File &gt; Open file…\nYou can run (send to the console window) part of the code by selecting lines and pressing CTRL+ENTER or CMD+ENTER or click the Run button at the top of the script editor window. If you do not select anything, R will run the line your cursor is on.\nYou can always run the whole script with the function source()\nFor example, to run the entire saved script.R if it’s in the root directory of the working directory, type\n\nsource(\"script.R\")\n\nYou can also click Run all in the editor window or type CTRL+SHIFT+S or CMD+SHIFT+S",
    "crumbs": [
      "Tidying Data",
      "Pivoting data"
    ]
  },
  {
    "objectID": "tidying/math_pivots.html#project-directory-habits",
    "href": "tidying/math_pivots.html#project-directory-habits",
    "title": "Pivoting data",
    "section": "Project directory habits",
    "text": "Project directory habits\nYour working directory is the folder on your computer in which you are currently working. When you ask R to open a certain file, it will look in the working directory for this file, and when you tell R to save a data file or figure, it will save it in the working directory.\nBefore you start working, please set your working directory to where all your data and script files are or should be stored.\nWhen you see code in a black box throughout this class, I want you to run that code in R unless noted otherwise. You can run it in the console, I’d prefer you do so in a script so you can see your history. In the video, you’ll see me swap back and forth between coding in the console and the script. This really depends on if I’m experimenting with code quickly or if it’s something I know I should track. Often I will copy and paste code executed from the console to growing script as an afterthought. Also, be sure to read the commented out code because I try to give additional context, like tips on what to do if the command fails.\nThis is an example of setting a working directory to a manual directory on your computer.\n\n# On a mac, it'd look like this\nsetwd(\"~/projects/learn-r-journalism\")\n\n# On a PC, it might look like this\nsetwd(\"C:/Documents/learn-r-journalism\")\n\nMake sure that slashes are forward slashes and that you don’t forget the quotation marks.\nWithin RStudio, you can also set the working directory via the menu Tools &gt; Set Working Directory\n\nThe commands above, setwd() was an example of setting an absolute folder.\nThis works for you for the purposes of this class, but if you wanted to share your methodology and script in the future or if you wanted to save run the code on another computer it would likely not work because it would be looking through a folder structure that doesn’t exist on any computer except the one where the original script was written. This is not ideal for reproducibility.\nWorking directories are a tough concept. If you’re curious about learning the BEST method for setting up directories for each project you’re working on, I’ve got some documentation.\nAlso, if you’re still curious, I follow this structure for all my R projects.",
    "crumbs": [
      "Tidying Data",
      "Pivoting data"
    ]
  },
  {
    "objectID": "tidying/math_pivots.html#syntax",
    "href": "tidying/math_pivots.html#syntax",
    "title": "Pivoting data",
    "section": "Syntax",
    "text": "Syntax\nYou must follow pretty specific syntax rules for it to work. R won’t guess for you.\n\n\nR is case-sensitive (unlike SQL) intepreted language (unlike C)\nCan enter commands at prompt &gt; or in batch\nComments are preceded by #\n\nThis is important to use often in your code for documentation\nYou’ll see it often in this course\n\nStatements are lines of code such as functions and object assignments\n\nEnters in code (as in a new line) or semi-colons will separate statements",
    "crumbs": [
      "Tidying Data",
      "Pivoting data"
    ]
  },
  {
    "objectID": "tidying/math_pivots.html#libraries",
    "href": "tidying/math_pivots.html#libraries",
    "title": "Pivoting data",
    "section": "Libraries",
    "text": "Libraries\nOne of the many benefits of R is that it is open source and free. This means users like you and me can create code that we use code that people in the data community created to make everyone’s lives easier.\nThese shared code snippets can help you do something as simple as combining spreadsheets in a folder or something as complicated as seasonally adjusting data in a time series.\nThey are organized in so-called packages or libraries.\nYou can do a lot of statistical analysis in R without any additional libraries— this is called base R.\nBut other users have created libraries with functions that solve common problems. R package users download only the libraries that they need for an individual project.\nTo get a list of all installed packages, go to the packages window or type library() in the console window. If the box in front of the package name is ticked in the packages window, the package is loaded and the functions within it are ready to be called.\nThere are many more packages available on the R website. If you want to install and use a package (for example, the packaged called “dplyr”) you should:\n\nInstall the package: click install packages in the packages window and type dplyr or type install.packages(\"dplyr\") in the console window.\nLoad the package: Check box in front of dplyr or type library(\"dplyr\") in the console window.",
    "crumbs": [
      "Tidying Data",
      "Pivoting data"
    ]
  },
  {
    "objectID": "tidying/math_pivots.html#common-r-commands",
    "href": "tidying/math_pivots.html#common-r-commands",
    "title": "Pivoting data",
    "section": "Common R commands",
    "text": "Common R commands\nR can be used as a calculator.\nJust type an equation in the console window after the &gt;\nIn those code sections, the code preceded by ## is the output of the code from the lines above.\nPlease type in 10^2 + 26 into the R environment below and click Run code.\n\n\n\n\n\n\n\n\n\n\n\n\nWorkspace\nYou can give numbers a name.\nBy doing so, they become so-called variables which can be used later.\nYou can assign values to an object name with either a = or &lt;-.\nThe command below sets 4 as a.\n\n\n\n\n\n\n\n\na is now saved up in the Environment tab in RStudio.\n\nYou can do calculations with a now.\nTry multiplying a with any number.\na * _\n\n\n\n\n\n\n\n\nIf you specify a again, it will forget what value you had before because you did not assign it to anything.\n\n\n\n\n\n\n\n\nYou can also assign a value to a using the old one\n\n\n\n\n\n\n\n\nTo remove all variables from R’s memory, type\n\n\n\n\n\n\n\n\nor click the “clear all” broom button in the work space window.",
    "crumbs": [
      "Tidying Data",
      "Pivoting data"
    ]
  },
  {
    "objectID": "tidying/math_pivots.html#objects-in-r",
    "href": "tidying/math_pivots.html#objects-in-r",
    "title": "Pivoting data",
    "section": "Objects in R",
    "text": "Objects in R\n\nScalars and vectors\nLike in many other programs, R organizes numbers in scalars (a single number 0-dimensional), vectors (a row of numbers, also called arrays - `-dimensional) and matrices (which we won’t get into now).\nThe a you defined was scalar.\nTo define a vector with the numbers 3,4, and 5, you need the function c() which is short for concatenate (or paste together).",
    "crumbs": [
      "Tidying Data",
      "Pivoting data"
    ]
  },
  {
    "objectID": "tidying/math_pivots.html#functions",
    "href": "tidying/math_pivots.html#functions",
    "title": "Pivoting data",
    "section": "Functions",
    "text": "Functions\nIf you would like to compute the mean of all the elements in the vector b from the example above, you could type\nPlease type out (300+4000+50)/3 in the code tester below:\n\n\n\n\n\n\nBut when the vector is very long, this is very boring and time-consuming work.\nFunctions do things to data. R is built on them. Some functions come with R, like median() or summary() and others come as part of packages that others have created.\nWhen you use a function to compute an average, you’ll type\n\nmean(x=b)\n\nWithin the brackets you specify the arguments.\nArguments give extra information to the function. In this case, the argument x says of which set of numbers (vector) the mean should computed (namely of b).\nSometimes the name of the argument is not necessary:\n\n\n\n\n\n\n\n\nAlso works.",
    "crumbs": [
      "Tidying Data",
      "Pivoting data"
    ]
  },
  {
    "objectID": "tidying/math_pivots.html#plots",
    "href": "tidying/math_pivots.html#plots",
    "title": "Pivoting data",
    "section": "Plots",
    "text": "Plots\nR can make simple graphics right away.\n\n\n\n\n\n\n\n\n\nIn the first line, 100 random numbers are assigned to the variable x, which becomes a vector by this operation.\nIn the second line, all these values are plotted in the plot window.",
    "crumbs": [
      "Tidying Data",
      "Pivoting data"
    ]
  },
  {
    "objectID": "tidying/math_pivots.html#not-available-data",
    "href": "tidying/math_pivots.html#not-available-data",
    "title": "Pivoting data",
    "section": "Not available data",
    "text": "Not available data\nWhen you work with real data, you will encounter missing values because instrumentation failed or human error.\nWhen a data is not available, you’ll often find an NA instead of a number.\n\n\n\n\n\n\n\n\nComputing statistics of incomplete data sets is strictly not possible.\nmaybe the largest value occurred during the weekend when you didn’t measure. Therefore, R will say that it doesn’t know what the largest value of j is\n\n\n\n\n\n\n\n\nIf you don’t mind about the missing data and want to compute the statistics anyway, you can add the argument na.rm=TRUE (Should I remove the NAs? Yes)\n\nmax(j, na.rm=T)\n\nNAs will also affect any sort of math if you’re not careful\n\n\n\n\n\n\n\n\nHere are some links on how to handle NAs in your data",
    "crumbs": [
      "Tidying Data",
      "Pivoting data"
    ]
  },
  {
    "objectID": "tidying/math_pivots.html#base-r-versus-tidyverse",
    "href": "tidying/math_pivots.html#base-r-versus-tidyverse",
    "title": "Pivoting data",
    "section": "Base R versus Tidyverse",
    "text": "Base R versus Tidyverse\nI will often mention “Base R” and “Tidyverse” throughout the course.\nBase R is what you get when you install R and don’t install anything extra.\nEverything you do in Tidyverse– the importing and wrangling of data, as well as the visualizations– can be done with Base R. It’s just older, the syntax is trickier, and it unfortunately has huge learning curve.\nFor the purposes of this class, you’ll learn just enough Base R to get things done but we’ll spend most of our time using functions in packages that have since been created by users to make our lives easier and have a good history of support from their creators.",
    "crumbs": [
      "Tidying Data",
      "Pivoting data"
    ]
  },
  {
    "objectID": "tidying/index.html",
    "href": "tidying/index.html",
    "title": "chjr2024",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "visualizing/viz.html",
    "href": "visualizing/viz.html",
    "title": "Visualizing data",
    "section": "",
    "text": "mutable ok_reponse = (reponse, n) =&gt; { return html`Loading...` };\nviewof reponse = Inputs.radio(\n  new Map([\n    [\"First choice.\", 1],\n    [\"Second choice.\", 2],\n    [\"Third choice\", 3],\n    [\"Fourth choice.\", 4]\n  ])\n);\nok_reponse(reponse, 2);\nwelcome to class!",
    "crumbs": [
      "Visualizing Data",
      "Visualizing data"
    ]
  },
  {
    "objectID": "visualizing/viz.html#tour-of-r-and-rstudio",
    "href": "visualizing/viz.html#tour-of-r-and-rstudio",
    "title": "Visualizing data",
    "section": "Tour of R and RStudio",
    "text": "Tour of R and RStudio\nR is just a programming language and can be open in any coding program like Sublime or Visual Code Studio. But we’re going to focus on using R in the environment known as RStudio because it easily shows all the different parts, like plots and objects, well.\nWhen you first open RStudio, the app is divided into three sections.\nMost sections have tabs for even more additional ways to view different sorts of things.\nThese sections can be customized and placed wherever you want through the RStudio menu options (if you’d rather the Files tab be in the top right instead of the top left, for example). Preferences &gt; Pane Layout\n\nThe tall section on the left is the console and that’s where you can type in R code to execute.\nThis code is also called commands or functions.\n\nIn the top right section, there’s the Environment tab where you can see the data or objects you are currently working on.\nAt first this section is empty because you have not loaded any data yet.\nThere’s also a tab in the top right section for History– this is where RStudio keeps track of the commands you run in the console.\n\nA viewer is on the bottom right, where there are tabs to flip through the Files and folder structure of your computer (like in Finder or Explorer), the Plots (diagrams) when they’ve been generated, your list of available R Packages, Help information etc.\n\nReproducibility: Save your scripts\nThere’s a difference between quick, on-the-fly analysis and analysis you want to rerun later on.\nThe code you type out and run in console can be copied and pasted and saved in scripts and R Markdown files. Scripts end with .R file extension and R Markdown files, which mixes both R code and Markdown code, end with .Rmd.\nR scripts versus R Markdown\nYou may hear mentions of “R Markdown” and that’s essentially the same thing as R scripts except with some enhanced formatting so that the code can be published as a pdf or a website or notebook. R scripts and R Markdown can only be opened by coding programs but the websites or PDFs generated by R Markdown can be open by non-programming people. It’s a means for communicating your results effectively to a wider audience. Compare the differences here and here.\nIn this course we’ll be alternating between typing code in the console and typing and saving code in a script. The code that’s disposable and written just for quick exploration can be and will be written in the console. Code we want to reuse and re purpose later on should be saved in a script.\n\nThese R source code files can be viewed in a Source section and pushes the console window down to accommodate.\nTo create a new script go through the menu File &gt; New File &gt; R Script or through the green plus button on the top left. This will expand the 3 windows in RStudio to 4. The script viewer will appear in the top left quadrant and push the console window into the lower left.\n\nThe file extensions for these files when saved ends with .R\nAny code we type in here can be run in the console. Hitting the Run button at the top of the script window will run the line of code on which the cursor is sitting.\nTo run multiple lines of code, highlight them and click Run.\n\nBe sure to save your scripts after you create them. And also save before running your code in case you write code that makes R crash– which will happen once in a while.",
    "crumbs": [
      "Visualizing Data",
      "Visualizing data"
    ]
  },
  {
    "objectID": "visualizing/viz.html#scripts",
    "href": "visualizing/viz.html#scripts",
    "title": "Visualizing data",
    "section": "Scripts",
    "text": "Scripts\nR is an interpreter that uses a command line based environment.\nThis means that you have to type commands, rather than use the mouse and menus.\nThis has the advantage that you do not always have to retype commands.\nYou can store your commands in files, the so-called scripts. These scripts have typically file names with the extension .R as in script.R.\nYou can open an editor window to edit these files by clicking File &gt; New or File &gt; Open file…\nYou can run (send to the console window) part of the code by selecting lines and pressing CTRL+ENTER or CMD+ENTER or click the Run button at the top of the script editor window. If you do not select anything, R will run the line your cursor is on.\nYou can always run the whole script with the function source()\nFor example, to run the entire saved script.R if it’s in the root directory of the working directory, type\n\nsource(\"script.R\")\n\nYou can also click Run all in the editor window or type CTRL+SHIFT+S or CMD+SHIFT+S",
    "crumbs": [
      "Visualizing Data",
      "Visualizing data"
    ]
  },
  {
    "objectID": "visualizing/viz.html#project-directory-habits",
    "href": "visualizing/viz.html#project-directory-habits",
    "title": "Visualizing data",
    "section": "Project directory habits",
    "text": "Project directory habits\nYour working directory is the folder on your computer in which you are currently working. When you ask R to open a certain file, it will look in the working directory for this file, and when you tell R to save a data file or figure, it will save it in the working directory.\nBefore you start working, please set your working directory to where all your data and script files are or should be stored.\nWhen you see code in a black box throughout this class, I want you to run that code in R unless noted otherwise. You can run it in the console, I’d prefer you do so in a script so you can see your history. In the video, you’ll see me swap back and forth between coding in the console and the script. This really depends on if I’m experimenting with code quickly or if it’s something I know I should track. Often I will copy and paste code executed from the console to growing script as an afterthought. Also, be sure to read the commented out code because I try to give additional context, like tips on what to do if the command fails.\nThis is an example of setting a working directory to a manual directory on your computer.\n\n# On a mac, it'd look like this\nsetwd(\"~/projects/learn-r-journalism\")\n\n# On a PC, it might look like this\nsetwd(\"C:/Documents/learn-r-journalism\")\n\nMake sure that slashes are forward slashes and that you don’t forget the quotation marks.\nWithin RStudio, you can also set the working directory via the menu Tools &gt; Set Working Directory\n\nThe commands above, setwd() was an example of setting an absolute folder.\nThis works for you for the purposes of this class, but if you wanted to share your methodology and script in the future or if you wanted to save run the code on another computer it would likely not work because it would be looking through a folder structure that doesn’t exist on any computer except the one where the original script was written. This is not ideal for reproducibility.\nWorking directories are a tough concept. If you’re curious about learning the BEST method for setting up directories for each project you’re working on, I’ve got some documentation.\nAlso, if you’re still curious, I follow this structure for all my R projects.",
    "crumbs": [
      "Visualizing Data",
      "Visualizing data"
    ]
  },
  {
    "objectID": "visualizing/viz.html#syntax",
    "href": "visualizing/viz.html#syntax",
    "title": "Visualizing data",
    "section": "Syntax",
    "text": "Syntax\nYou must follow pretty specific syntax rules for it to work. R won’t guess for you.\n\n\nR is case-sensitive (unlike SQL) intepreted language (unlike C)\nCan enter commands at prompt &gt; or in batch\nComments are preceded by #\n\nThis is important to use often in your code for documentation\nYou’ll see it often in this course\n\nStatements are lines of code such as functions and object assignments\n\nEnters in code (as in a new line) or semi-colons will separate statements",
    "crumbs": [
      "Visualizing Data",
      "Visualizing data"
    ]
  },
  {
    "objectID": "visualizing/viz.html#libraries",
    "href": "visualizing/viz.html#libraries",
    "title": "Visualizing data",
    "section": "Libraries",
    "text": "Libraries\nOne of the many benefits of R is that it is open source and free. This means users like you and me can create code that we use code that people in the data community created to make everyone’s lives easier.\nThese shared code snippets can help you do something as simple as combining spreadsheets in a folder or something as complicated as seasonally adjusting data in a time series.\nThey are organized in so-called packages or libraries.\nYou can do a lot of statistical analysis in R without any additional libraries— this is called base R.\nBut other users have created libraries with functions that solve common problems. R package users download only the libraries that they need for an individual project.\nTo get a list of all installed packages, go to the packages window or type library() in the console window. If the box in front of the package name is ticked in the packages window, the package is loaded and the functions within it are ready to be called.\nThere are many more packages available on the R website. If you want to install and use a package (for example, the packaged called “dplyr”) you should:\n\nInstall the package: click install packages in the packages window and type dplyr or type install.packages(\"dplyr\") in the console window.\nLoad the package: Check box in front of dplyr or type library(\"dplyr\") in the console window.",
    "crumbs": [
      "Visualizing Data",
      "Visualizing data"
    ]
  },
  {
    "objectID": "visualizing/viz.html#common-r-commands",
    "href": "visualizing/viz.html#common-r-commands",
    "title": "Visualizing data",
    "section": "Common R commands",
    "text": "Common R commands\nR can be used as a calculator.\nJust type an equation in the console window after the &gt;\nIn those code sections, the code preceded by ## is the output of the code from the lines above.\nPlease type in 10^2 + 26 into the R environment below and click Run code.\n\n\n\n\n\n\n\n\n\n\n\n\nWorkspace\nYou can give numbers a name.\nBy doing so, they become so-called variables which can be used later.\nYou can assign values to an object name with either a = or &lt;-.\nThe command below sets 4 as a.\n\n\n\n\n\n\n\n\na is now saved up in the Environment tab in RStudio.\n\nYou can do calculations with a now.\nTry multiplying a with any number.\na * _\n\n\n\n\n\n\n\n\nIf you specify a again, it will forget what value you had before because you did not assign it to anything.\n\n\n\n\n\n\n\n\nYou can also assign a value to a using the old one\n\n\n\n\n\n\n\n\nTo remove all variables from R’s memory, type\n\n\n\n\n\n\n\n\nor click the “clear all” broom button in the work space window.",
    "crumbs": [
      "Visualizing Data",
      "Visualizing data"
    ]
  },
  {
    "objectID": "visualizing/viz.html#objects-in-r",
    "href": "visualizing/viz.html#objects-in-r",
    "title": "Visualizing data",
    "section": "Objects in R",
    "text": "Objects in R\n\nScalars and vectors\nLike in many other programs, R organizes numbers in scalars (a single number 0-dimensional), vectors (a row of numbers, also called arrays - `-dimensional) and matrices (which we won’t get into now).\nThe a you defined was scalar.\nTo define a vector with the numbers 3,4, and 5, you need the function c() which is short for concatenate (or paste together).",
    "crumbs": [
      "Visualizing Data",
      "Visualizing data"
    ]
  },
  {
    "objectID": "visualizing/viz.html#functions",
    "href": "visualizing/viz.html#functions",
    "title": "Visualizing data",
    "section": "Functions",
    "text": "Functions\nIf you would like to compute the mean of all the elements in the vector b from the example above, you could type\nPlease type out (300+4000+50)/3 in the code tester below:\n\n\n\n\n\n\nBut when the vector is very long, this is very boring and time-consuming work.\nFunctions do things to data. R is built on them. Some functions come with R, like median() or summary() and others come as part of packages that others have created.\nWhen you use a function to compute an average, you’ll type\n\nmean(x=b)\n\nWithin the brackets you specify the arguments.\nArguments give extra information to the function. In this case, the argument x says of which set of numbers (vector) the mean should computed (namely of b).\nSometimes the name of the argument is not necessary:\n\n\n\n\n\n\n\n\nAlso works.",
    "crumbs": [
      "Visualizing Data",
      "Visualizing data"
    ]
  },
  {
    "objectID": "visualizing/viz.html#plots",
    "href": "visualizing/viz.html#plots",
    "title": "Visualizing data",
    "section": "Plots",
    "text": "Plots\nR can make simple graphics right away.\n\n\n\n\n\n\n\n\n\nIn the first line, 100 random numbers are assigned to the variable x, which becomes a vector by this operation.\nIn the second line, all these values are plotted in the plot window.",
    "crumbs": [
      "Visualizing Data",
      "Visualizing data"
    ]
  },
  {
    "objectID": "visualizing/viz.html#not-available-data",
    "href": "visualizing/viz.html#not-available-data",
    "title": "Visualizing data",
    "section": "Not available data",
    "text": "Not available data\nWhen you work with real data, you will encounter missing values because instrumentation failed or human error.\nWhen a data is not available, you’ll often find an NA instead of a number.\n\n\n\n\n\n\n\n\nComputing statistics of incomplete data sets is strictly not possible.\nmaybe the largest value occurred during the weekend when you didn’t measure. Therefore, R will say that it doesn’t know what the largest value of j is\n\n\n\n\n\n\n\n\nIf you don’t mind about the missing data and want to compute the statistics anyway, you can add the argument na.rm=TRUE (Should I remove the NAs? Yes)\n\nmax(j, na.rm=T)\n\nNAs will also affect any sort of math if you’re not careful\n\n\n\n\n\n\n\n\nHere are some links on how to handle NAs in your data",
    "crumbs": [
      "Visualizing Data",
      "Visualizing data"
    ]
  },
  {
    "objectID": "visualizing/viz.html#base-r-versus-tidyverse",
    "href": "visualizing/viz.html#base-r-versus-tidyverse",
    "title": "Visualizing data",
    "section": "Base R versus Tidyverse",
    "text": "Base R versus Tidyverse\nI will often mention “Base R” and “Tidyverse” throughout the course.\nBase R is what you get when you install R and don’t install anything extra.\nEverything you do in Tidyverse– the importing and wrangling of data, as well as the visualizations– can be done with Base R. It’s just older, the syntax is trickier, and it unfortunately has huge learning curve.\nFor the purposes of this class, you’ll learn just enough Base R to get things done but we’ll spend most of our time using functions in packages that have since been created by users to make our lives easier and have a good history of support from their creators.",
    "crumbs": [
      "Visualizing Data",
      "Visualizing data"
    ]
  },
  {
    "objectID": "visualizing/index.html",
    "href": "visualizing/index.html",
    "title": "chjr2024",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "wrangling/index.html",
    "href": "wrangling/index.html",
    "title": "chjr2024",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "wrangling/filter_select.html",
    "href": "wrangling/filter_select.html",
    "title": "Filtering and selecting data",
    "section": "",
    "text": "mutable ok_reponse = (reponse, n) =&gt; { return html`Loading...` };\nviewof reponse = Inputs.radio(\n  new Map([\n    [\"First choice.\", 1],\n    [\"Second choice.\", 2],\n    [\"Third choice\", 3],\n    [\"Fourth choice.\", 4]\n  ])\n);\nok_reponse(reponse, 2);\nwelcome to class!",
    "crumbs": [
      "Wranging Data",
      "Filtering and selecting data"
    ]
  },
  {
    "objectID": "wrangling/filter_select.html#tour-of-r-and-rstudio",
    "href": "wrangling/filter_select.html#tour-of-r-and-rstudio",
    "title": "Filtering and selecting data",
    "section": "Tour of R and RStudio",
    "text": "Tour of R and RStudio\nR is just a programming language and can be open in any coding program like Sublime or Visual Code Studio. But we’re going to focus on using R in the environment known as RStudio because it easily shows all the different parts, like plots and objects, well.\nWhen you first open RStudio, the app is divided into three sections.\nMost sections have tabs for even more additional ways to view different sorts of things.\nThese sections can be customized and placed wherever you want through the RStudio menu options (if you’d rather the Files tab be in the top right instead of the top left, for example). Preferences &gt; Pane Layout\n\nThe tall section on the left is the console and that’s where you can type in R code to execute.\nThis code is also called commands or functions.\n\nIn the top right section, there’s the Environment tab where you can see the data or objects you are currently working on.\nAt first this section is empty because you have not loaded any data yet.\nThere’s also a tab in the top right section for History– this is where RStudio keeps track of the commands you run in the console.\n\nA viewer is on the bottom right, where there are tabs to flip through the Files and folder structure of your computer (like in Finder or Explorer), the Plots (diagrams) when they’ve been generated, your list of available R Packages, Help information etc.\n\nReproducibility: Save your scripts\nThere’s a difference between quick, on-the-fly analysis and analysis you want to rerun later on.\nThe code you type out and run in console can be copied and pasted and saved in scripts and R Markdown files. Scripts end with .R file extension and R Markdown files, which mixes both R code and Markdown code, end with .Rmd.\nR scripts versus R Markdown\nYou may hear mentions of “R Markdown” and that’s essentially the same thing as R scripts except with some enhanced formatting so that the code can be published as a pdf or a website or notebook. R scripts and R Markdown can only be opened by coding programs but the websites or PDFs generated by R Markdown can be open by non-programming people. It’s a means for communicating your results effectively to a wider audience. Compare the differences here and here.\nIn this course we’ll be alternating between typing code in the console and typing and saving code in a script. The code that’s disposable and written just for quick exploration can be and will be written in the console. Code we want to reuse and re purpose later on should be saved in a script.\n\nThese R source code files can be viewed in a Source section and pushes the console window down to accommodate.\nTo create a new script go through the menu File &gt; New File &gt; R Script or through the green plus button on the top left. This will expand the 3 windows in RStudio to 4. The script viewer will appear in the top left quadrant and push the console window into the lower left.\n\nThe file extensions for these files when saved ends with .R\nAny code we type in here can be run in the console. Hitting the Run button at the top of the script window will run the line of code on which the cursor is sitting.\nTo run multiple lines of code, highlight them and click Run.\n\nBe sure to save your scripts after you create them. And also save before running your code in case you write code that makes R crash– which will happen once in a while.",
    "crumbs": [
      "Wranging Data",
      "Filtering and selecting data"
    ]
  },
  {
    "objectID": "wrangling/filter_select.html#scripts",
    "href": "wrangling/filter_select.html#scripts",
    "title": "Filtering and selecting data",
    "section": "Scripts",
    "text": "Scripts\nR is an interpreter that uses a command line based environment.\nThis means that you have to type commands, rather than use the mouse and menus.\nThis has the advantage that you do not always have to retype commands.\nYou can store your commands in files, the so-called scripts. These scripts have typically file names with the extension .R as in script.R.\nYou can open an editor window to edit these files by clicking File &gt; New or File &gt; Open file…\nYou can run (send to the console window) part of the code by selecting lines and pressing CTRL+ENTER or CMD+ENTER or click the Run button at the top of the script editor window. If you do not select anything, R will run the line your cursor is on.\nYou can always run the whole script with the function source()\nFor example, to run the entire saved script.R if it’s in the root directory of the working directory, type\n\nsource(\"script.R\")\n\nYou can also click Run all in the editor window or type CTRL+SHIFT+S or CMD+SHIFT+S",
    "crumbs": [
      "Wranging Data",
      "Filtering and selecting data"
    ]
  },
  {
    "objectID": "wrangling/filter_select.html#project-directory-habits",
    "href": "wrangling/filter_select.html#project-directory-habits",
    "title": "Filtering and selecting data",
    "section": "Project directory habits",
    "text": "Project directory habits\nYour working directory is the folder on your computer in which you are currently working. When you ask R to open a certain file, it will look in the working directory for this file, and when you tell R to save a data file or figure, it will save it in the working directory.\nBefore you start working, please set your working directory to where all your data and script files are or should be stored.\nWhen you see code in a black box throughout this class, I want you to run that code in R unless noted otherwise. You can run it in the console, I’d prefer you do so in a script so you can see your history. In the video, you’ll see me swap back and forth between coding in the console and the script. This really depends on if I’m experimenting with code quickly or if it’s something I know I should track. Often I will copy and paste code executed from the console to growing script as an afterthought. Also, be sure to read the commented out code because I try to give additional context, like tips on what to do if the command fails.\nThis is an example of setting a working directory to a manual directory on your computer.\n\n# On a mac, it'd look like this\nsetwd(\"~/projects/learn-r-journalism\")\n\n# On a PC, it might look like this\nsetwd(\"C:/Documents/learn-r-journalism\")\n\nMake sure that slashes are forward slashes and that you don’t forget the quotation marks.\nWithin RStudio, you can also set the working directory via the menu Tools &gt; Set Working Directory\n\nThe commands above, setwd() was an example of setting an absolute folder.\nThis works for you for the purposes of this class, but if you wanted to share your methodology and script in the future or if you wanted to save run the code on another computer it would likely not work because it would be looking through a folder structure that doesn’t exist on any computer except the one where the original script was written. This is not ideal for reproducibility.\nWorking directories are a tough concept. If you’re curious about learning the BEST method for setting up directories for each project you’re working on, I’ve got some documentation.\nAlso, if you’re still curious, I follow this structure for all my R projects.",
    "crumbs": [
      "Wranging Data",
      "Filtering and selecting data"
    ]
  },
  {
    "objectID": "wrangling/filter_select.html#syntax",
    "href": "wrangling/filter_select.html#syntax",
    "title": "Filtering and selecting data",
    "section": "Syntax",
    "text": "Syntax\nYou must follow pretty specific syntax rules for it to work. R won’t guess for you.\n\n\nR is case-sensitive (unlike SQL) intepreted language (unlike C)\nCan enter commands at prompt &gt; or in batch\nComments are preceded by #\n\nThis is important to use often in your code for documentation\nYou’ll see it often in this course\n\nStatements are lines of code such as functions and object assignments\n\nEnters in code (as in a new line) or semi-colons will separate statements",
    "crumbs": [
      "Wranging Data",
      "Filtering and selecting data"
    ]
  },
  {
    "objectID": "wrangling/filter_select.html#libraries",
    "href": "wrangling/filter_select.html#libraries",
    "title": "Filtering and selecting data",
    "section": "Libraries",
    "text": "Libraries\nOne of the many benefits of R is that it is open source and free. This means users like you and me can create code that we use code that people in the data community created to make everyone’s lives easier.\nThese shared code snippets can help you do something as simple as combining spreadsheets in a folder or something as complicated as seasonally adjusting data in a time series.\nThey are organized in so-called packages or libraries.\nYou can do a lot of statistical analysis in R without any additional libraries— this is called base R.\nBut other users have created libraries with functions that solve common problems. R package users download only the libraries that they need for an individual project.\nTo get a list of all installed packages, go to the packages window or type library() in the console window. If the box in front of the package name is ticked in the packages window, the package is loaded and the functions within it are ready to be called.\nThere are many more packages available on the R website. If you want to install and use a package (for example, the packaged called “dplyr”) you should:\n\nInstall the package: click install packages in the packages window and type dplyr or type install.packages(\"dplyr\") in the console window.\nLoad the package: Check box in front of dplyr or type library(\"dplyr\") in the console window.",
    "crumbs": [
      "Wranging Data",
      "Filtering and selecting data"
    ]
  },
  {
    "objectID": "wrangling/filter_select.html#common-r-commands",
    "href": "wrangling/filter_select.html#common-r-commands",
    "title": "Filtering and selecting data",
    "section": "Common R commands",
    "text": "Common R commands\nR can be used as a calculator.\nJust type an equation in the console window after the &gt;\nIn those code sections, the code preceded by ## is the output of the code from the lines above.\nPlease type in 10^2 + 26 into the R environment below and click Run code.\n\n\n\n\n\n\n\n\n\n\n\n\nWorkspace\nYou can give numbers a name.\nBy doing so, they become so-called variables which can be used later.\nYou can assign values to an object name with either a = or &lt;-.\nThe command below sets 4 as a.\n\n\n\n\n\n\n\n\na is now saved up in the Environment tab in RStudio.\n\nYou can do calculations with a now.\nTry multiplying a with any number.\na * _\n\n\n\n\n\n\n\n\nIf you specify a again, it will forget what value you had before because you did not assign it to anything.\n\n\n\n\n\n\n\n\nYou can also assign a value to a using the old one\n\n\n\n\n\n\n\n\nTo remove all variables from R’s memory, type\n\n\n\n\n\n\n\n\nor click the “clear all” broom button in the work space window.",
    "crumbs": [
      "Wranging Data",
      "Filtering and selecting data"
    ]
  },
  {
    "objectID": "wrangling/filter_select.html#objects-in-r",
    "href": "wrangling/filter_select.html#objects-in-r",
    "title": "Filtering and selecting data",
    "section": "Objects in R",
    "text": "Objects in R\n\nScalars and vectors\nLike in many other programs, R organizes numbers in scalars (a single number 0-dimensional), vectors (a row of numbers, also called arrays - `-dimensional) and matrices (which we won’t get into now).\nThe a you defined was scalar.\nTo define a vector with the numbers 3,4, and 5, you need the function c() which is short for concatenate (or paste together).",
    "crumbs": [
      "Wranging Data",
      "Filtering and selecting data"
    ]
  },
  {
    "objectID": "wrangling/filter_select.html#functions",
    "href": "wrangling/filter_select.html#functions",
    "title": "Filtering and selecting data",
    "section": "Functions",
    "text": "Functions\nIf you would like to compute the mean of all the elements in the vector b from the example above, you could type\nPlease type out (300+4000+50)/3 in the code tester below:\n\n\n\n\n\n\nBut when the vector is very long, this is very boring and time-consuming work.\nFunctions do things to data. R is built on them. Some functions come with R, like median() or summary() and others come as part of packages that others have created.\nWhen you use a function to compute an average, you’ll type\n\nmean(x=b)\n\nWithin the brackets you specify the arguments.\nArguments give extra information to the function. In this case, the argument x says of which set of numbers (vector) the mean should computed (namely of b).\nSometimes the name of the argument is not necessary:\n\n\n\n\n\n\n\n\nAlso works.",
    "crumbs": [
      "Wranging Data",
      "Filtering and selecting data"
    ]
  },
  {
    "objectID": "wrangling/filter_select.html#plots",
    "href": "wrangling/filter_select.html#plots",
    "title": "Filtering and selecting data",
    "section": "Plots",
    "text": "Plots\nR can make simple graphics right away.\n\n\n\n\n\n\n\n\n\nIn the first line, 100 random numbers are assigned to the variable x, which becomes a vector by this operation.\nIn the second line, all these values are plotted in the plot window.",
    "crumbs": [
      "Wranging Data",
      "Filtering and selecting data"
    ]
  },
  {
    "objectID": "wrangling/filter_select.html#not-available-data",
    "href": "wrangling/filter_select.html#not-available-data",
    "title": "Filtering and selecting data",
    "section": "Not available data",
    "text": "Not available data\nWhen you work with real data, you will encounter missing values because instrumentation failed or human error.\nWhen a data is not available, you’ll often find an NA instead of a number.\n\n\n\n\n\n\n\n\nComputing statistics of incomplete data sets is strictly not possible.\nmaybe the largest value occurred during the weekend when you didn’t measure. Therefore, R will say that it doesn’t know what the largest value of j is\n\n\n\n\n\n\n\n\nIf you don’t mind about the missing data and want to compute the statistics anyway, you can add the argument na.rm=TRUE (Should I remove the NAs? Yes)\n\nmax(j, na.rm=T)\n\nNAs will also affect any sort of math if you’re not careful\n\n\n\n\n\n\n\n\nHere are some links on how to handle NAs in your data",
    "crumbs": [
      "Wranging Data",
      "Filtering and selecting data"
    ]
  },
  {
    "objectID": "wrangling/filter_select.html#base-r-versus-tidyverse",
    "href": "wrangling/filter_select.html#base-r-versus-tidyverse",
    "title": "Filtering and selecting data",
    "section": "Base R versus Tidyverse",
    "text": "Base R versus Tidyverse\nI will often mention “Base R” and “Tidyverse” throughout the course.\nBase R is what you get when you install R and don’t install anything extra.\nEverything you do in Tidyverse– the importing and wrangling of data, as well as the visualizations– can be done with Base R. It’s just older, the syntax is trickier, and it unfortunately has huge learning curve.\nFor the purposes of this class, you’ll learn just enough Base R to get things done but we’ll spend most of our time using functions in packages that have since been created by users to make our lives easier and have a good history of support from their creators.",
    "crumbs": [
      "Wranging Data",
      "Filtering and selecting data"
    ]
  },
  {
    "objectID": "importing/importing_csv.html",
    "href": "importing/importing_csv.html",
    "title": "Importing csv files",
    "section": "",
    "text": "mutable ok_reponse = (reponse, n) =&gt; { return html`Loading...` };\nviewof reponse = Inputs.radio(\n  new Map([\n    [\"First choice.\", 1],\n    [\"Second choice.\", 2],\n    [\"Third choice\", 3],\n    [\"Fourth choice.\", 4]\n  ])\n);\nok_reponse(reponse, 2);\nwelcome to class!",
    "crumbs": [
      "Importing Data",
      "Importing csv files"
    ]
  },
  {
    "objectID": "importing/importing_csv.html#tour-of-r-and-rstudio",
    "href": "importing/importing_csv.html#tour-of-r-and-rstudio",
    "title": "Importing csv files",
    "section": "Tour of R and RStudio",
    "text": "Tour of R and RStudio\nR is just a programming language and can be open in any coding program like Sublime or Visual Code Studio. But we’re going to focus on using R in the environment known as RStudio because it easily shows all the different parts, like plots and objects, well.\nWhen you first open RStudio, the app is divided into three sections.\nMost sections have tabs for even more additional ways to view different sorts of things.\nThese sections can be customized and placed wherever you want through the RStudio menu options (if you’d rather the Files tab be in the top right instead of the top left, for example). Preferences &gt; Pane Layout\n\nThe tall section on the left is the console and that’s where you can type in R code to execute.\nThis code is also called commands or functions.\n\nIn the top right section, there’s the Environment tab where you can see the data or objects you are currently working on.\nAt first this section is empty because you have not loaded any data yet.\nThere’s also a tab in the top right section for History– this is where RStudio keeps track of the commands you run in the console.\n\nA viewer is on the bottom right, where there are tabs to flip through the Files and folder structure of your computer (like in Finder or Explorer), the Plots (diagrams) when they’ve been generated, your list of available R Packages, Help information etc.\n\nReproducibility: Save your scripts\nThere’s a difference between quick, on-the-fly analysis and analysis you want to rerun later on.\nThe code you type out and run in console can be copied and pasted and saved in scripts and R Markdown files. Scripts end with .R file extension and R Markdown files, which mixes both R code and Markdown code, end with .Rmd.\nR scripts versus R Markdown\nYou may hear mentions of “R Markdown” and that’s essentially the same thing as R scripts except with some enhanced formatting so that the code can be published as a pdf or a website or notebook. R scripts and R Markdown can only be opened by coding programs but the websites or PDFs generated by R Markdown can be open by non-programming people. It’s a means for communicating your results effectively to a wider audience. Compare the differences here and here.\nIn this course we’ll be alternating between typing code in the console and typing and saving code in a script. The code that’s disposable and written just for quick exploration can be and will be written in the console. Code we want to reuse and re purpose later on should be saved in a script.\n\nThese R source code files can be viewed in a Source section and pushes the console window down to accommodate.\nTo create a new script go through the menu File &gt; New File &gt; R Script or through the green plus button on the top left. This will expand the 3 windows in RStudio to 4. The script viewer will appear in the top left quadrant and push the console window into the lower left.\n\nThe file extensions for these files when saved ends with .R\nAny code we type in here can be run in the console. Hitting the Run button at the top of the script window will run the line of code on which the cursor is sitting.\nTo run multiple lines of code, highlight them and click Run.\n\nBe sure to save your scripts after you create them. And also save before running your code in case you write code that makes R crash– which will happen once in a while.",
    "crumbs": [
      "Importing Data",
      "Importing csv files"
    ]
  },
  {
    "objectID": "importing/importing_csv.html#scripts",
    "href": "importing/importing_csv.html#scripts",
    "title": "Importing csv files",
    "section": "Scripts",
    "text": "Scripts\nR is an interpreter that uses a command line based environment.\nThis means that you have to type commands, rather than use the mouse and menus.\nThis has the advantage that you do not always have to retype commands.\nYou can store your commands in files, the so-called scripts. These scripts have typically file names with the extension .R as in script.R.\nYou can open an editor window to edit these files by clicking File &gt; New or File &gt; Open file…\nYou can run (send to the console window) part of the code by selecting lines and pressing CTRL+ENTER or CMD+ENTER or click the Run button at the top of the script editor window. If you do not select anything, R will run the line your cursor is on.\nYou can always run the whole script with the function source()\nFor example, to run the entire saved script.R if it’s in the root directory of the working directory, type\n\nsource(\"script.R\")\n\nYou can also click Run all in the editor window or type CTRL+SHIFT+S or CMD+SHIFT+S",
    "crumbs": [
      "Importing Data",
      "Importing csv files"
    ]
  },
  {
    "objectID": "importing/importing_csv.html#project-directory-habits",
    "href": "importing/importing_csv.html#project-directory-habits",
    "title": "Importing csv files",
    "section": "Project directory habits",
    "text": "Project directory habits\nYour working directory is the folder on your computer in which you are currently working. When you ask R to open a certain file, it will look in the working directory for this file, and when you tell R to save a data file or figure, it will save it in the working directory.\nBefore you start working, please set your working directory to where all your data and script files are or should be stored.\nWhen you see code in a black box throughout this class, I want you to run that code in R unless noted otherwise. You can run it in the console, I’d prefer you do so in a script so you can see your history. In the video, you’ll see me swap back and forth between coding in the console and the script. This really depends on if I’m experimenting with code quickly or if it’s something I know I should track. Often I will copy and paste code executed from the console to growing script as an afterthought. Also, be sure to read the commented out code because I try to give additional context, like tips on what to do if the command fails.\nThis is an example of setting a working directory to a manual directory on your computer.\n\n# On a mac, it'd look like this\nsetwd(\"~/projects/learn-r-journalism\")\n\n# On a PC, it might look like this\nsetwd(\"C:/Documents/learn-r-journalism\")\n\nMake sure that slashes are forward slashes and that you don’t forget the quotation marks.\nWithin RStudio, you can also set the working directory via the menu Tools &gt; Set Working Directory\n\nThe commands above, setwd() was an example of setting an absolute folder.\nThis works for you for the purposes of this class, but if you wanted to share your methodology and script in the future or if you wanted to save run the code on another computer it would likely not work because it would be looking through a folder structure that doesn’t exist on any computer except the one where the original script was written. This is not ideal for reproducibility.\nWorking directories are a tough concept. If you’re curious about learning the BEST method for setting up directories for each project you’re working on, I’ve got some documentation.\nAlso, if you’re still curious, I follow this structure for all my R projects.",
    "crumbs": [
      "Importing Data",
      "Importing csv files"
    ]
  },
  {
    "objectID": "importing/importing_csv.html#syntax",
    "href": "importing/importing_csv.html#syntax",
    "title": "Importing csv files",
    "section": "Syntax",
    "text": "Syntax\nYou must follow pretty specific syntax rules for it to work. R won’t guess for you.\n\n\nR is case-sensitive (unlike SQL) intepreted language (unlike C)\nCan enter commands at prompt &gt; or in batch\nComments are preceded by #\n\nThis is important to use often in your code for documentation\nYou’ll see it often in this course\n\nStatements are lines of code such as functions and object assignments\n\nEnters in code (as in a new line) or semi-colons will separate statements",
    "crumbs": [
      "Importing Data",
      "Importing csv files"
    ]
  },
  {
    "objectID": "importing/importing_csv.html#libraries",
    "href": "importing/importing_csv.html#libraries",
    "title": "Importing csv files",
    "section": "Libraries",
    "text": "Libraries\nOne of the many benefits of R is that it is open source and free. This means users like you and me can create code that we use code that people in the data community created to make everyone’s lives easier.\nThese shared code snippets can help you do something as simple as combining spreadsheets in a folder or something as complicated as seasonally adjusting data in a time series.\nThey are organized in so-called packages or libraries.\nYou can do a lot of statistical analysis in R without any additional libraries— this is called base R.\nBut other users have created libraries with functions that solve common problems. R package users download only the libraries that they need for an individual project.\nTo get a list of all installed packages, go to the packages window or type library() in the console window. If the box in front of the package name is ticked in the packages window, the package is loaded and the functions within it are ready to be called.\nThere are many more packages available on the R website. If you want to install and use a package (for example, the packaged called “dplyr”) you should:\n\nInstall the package: click install packages in the packages window and type dplyr or type install.packages(\"dplyr\") in the console window.\nLoad the package: Check box in front of dplyr or type library(\"dplyr\") in the console window.",
    "crumbs": [
      "Importing Data",
      "Importing csv files"
    ]
  },
  {
    "objectID": "importing/importing_csv.html#common-r-commands",
    "href": "importing/importing_csv.html#common-r-commands",
    "title": "Importing csv files",
    "section": "Common R commands",
    "text": "Common R commands\nR can be used as a calculator.\nJust type an equation in the console window after the &gt;\nIn those code sections, the code preceded by ## is the output of the code from the lines above.\nPlease type in 10^2 + 26 into the R environment below and click Run code.\n\n\n\n\n\n\n\n\n\n\n\n\nWorkspace\nYou can give numbers a name.\nBy doing so, they become so-called variables which can be used later.\nYou can assign values to an object name with either a = or &lt;-.\nThe command below sets 4 as a.\n\n\n\n\n\n\n\n\na is now saved up in the Environment tab in RStudio.\n\nYou can do calculations with a now.\nTry multiplying a with any number.\na * _\n\n\n\n\n\n\n\n\nIf you specify a again, it will forget what value you had before because you did not assign it to anything.\n\n\n\n\n\n\n\n\nYou can also assign a value to a using the old one\n\n\n\n\n\n\n\n\nTo remove all variables from R’s memory, type\n\n\n\n\n\n\n\n\nor click the “clear all” broom button in the work space window.",
    "crumbs": [
      "Importing Data",
      "Importing csv files"
    ]
  },
  {
    "objectID": "importing/importing_csv.html#objects-in-r",
    "href": "importing/importing_csv.html#objects-in-r",
    "title": "Importing csv files",
    "section": "Objects in R",
    "text": "Objects in R\n\nScalars and vectors\nLike in many other programs, R organizes numbers in scalars (a single number 0-dimensional), vectors (a row of numbers, also called arrays - `-dimensional) and matrices (which we won’t get into now).\nThe a you defined was scalar.\nTo define a vector with the numbers 3,4, and 5, you need the function c() which is short for concatenate (or paste together).",
    "crumbs": [
      "Importing Data",
      "Importing csv files"
    ]
  },
  {
    "objectID": "importing/importing_csv.html#functions",
    "href": "importing/importing_csv.html#functions",
    "title": "Importing csv files",
    "section": "Functions",
    "text": "Functions\nIf you would like to compute the mean of all the elements in the vector b from the example above, you could type\nPlease type out (300+4000+50)/3 in the code tester below:\n\n\n\n\n\n\nBut when the vector is very long, this is very boring and time-consuming work.\nFunctions do things to data. R is built on them. Some functions come with R, like median() or summary() and others come as part of packages that others have created.\nWhen you use a function to compute an average, you’ll type\n\nmean(x=b)\n\nWithin the brackets you specify the arguments.\nArguments give extra information to the function. In this case, the argument x says of which set of numbers (vector) the mean should computed (namely of b).\nSometimes the name of the argument is not necessary:\n\n\n\n\n\n\n\n\nAlso works.",
    "crumbs": [
      "Importing Data",
      "Importing csv files"
    ]
  },
  {
    "objectID": "importing/importing_csv.html#plots",
    "href": "importing/importing_csv.html#plots",
    "title": "Importing csv files",
    "section": "Plots",
    "text": "Plots\nR can make simple graphics right away.\n\n\n\n\n\n\n\n\n\nIn the first line, 100 random numbers are assigned to the variable x, which becomes a vector by this operation.\nIn the second line, all these values are plotted in the plot window.",
    "crumbs": [
      "Importing Data",
      "Importing csv files"
    ]
  },
  {
    "objectID": "importing/importing_csv.html#not-available-data",
    "href": "importing/importing_csv.html#not-available-data",
    "title": "Importing csv files",
    "section": "Not available data",
    "text": "Not available data\nWhen you work with real data, you will encounter missing values because instrumentation failed or human error.\nWhen a data is not available, you’ll often find an NA instead of a number.\n\n\n\n\n\n\n\n\nComputing statistics of incomplete data sets is strictly not possible.\nmaybe the largest value occurred during the weekend when you didn’t measure. Therefore, R will say that it doesn’t know what the largest value of j is\n\n\n\n\n\n\n\n\nIf you don’t mind about the missing data and want to compute the statistics anyway, you can add the argument na.rm=TRUE (Should I remove the NAs? Yes)\n\nmax(j, na.rm=T)\n\nNAs will also affect any sort of math if you’re not careful\n\n\n\n\n\n\n\n\nHere are some links on how to handle NAs in your data",
    "crumbs": [
      "Importing Data",
      "Importing csv files"
    ]
  },
  {
    "objectID": "importing/importing_csv.html#base-r-versus-tidyverse",
    "href": "importing/importing_csv.html#base-r-versus-tidyverse",
    "title": "Importing csv files",
    "section": "Base R versus Tidyverse",
    "text": "Base R versus Tidyverse\nI will often mention “Base R” and “Tidyverse” throughout the course.\nBase R is what you get when you install R and don’t install anything extra.\nEverything you do in Tidyverse– the importing and wrangling of data, as well as the visualizations– can be done with Base R. It’s just older, the syntax is trickier, and it unfortunately has huge learning curve.\nFor the purposes of this class, you’ll learn just enough Base R to get things done but we’ll spend most of our time using functions in packages that have since been created by users to make our lives easier and have a good history of support from their creators.",
    "crumbs": [
      "Importing Data",
      "Importing csv files"
    ]
  },
  {
    "objectID": "getting_started/data_types.html",
    "href": "getting_started/data_types.html",
    "title": "Data types in R",
    "section": "",
    "text": "mutable ok_reponse = (reponse, n) =&gt; { return html`Loading...` };\nviewof reponse = Inputs.radio(\n  new Map([\n    [\"First choice.\", 1],\n    [\"Second choice.\", 2],\n    [\"Third choice\", 3],\n    [\"Fourth choice.\", 4]\n  ])\n);\nok_reponse(reponse, 2);\nwelcome to class!",
    "crumbs": [
      "Getting Started",
      "Data types in R"
    ]
  },
  {
    "objectID": "getting_started/data_types.html#tour-of-r-and-rstudio",
    "href": "getting_started/data_types.html#tour-of-r-and-rstudio",
    "title": "Data types in R",
    "section": "Tour of R and RStudio",
    "text": "Tour of R and RStudio\nR is just a programming language and can be open in any coding program like Sublime or Visual Code Studio. But we’re going to focus on using R in the environment known as RStudio because it easily shows all the different parts, like plots and objects, well.\nWhen you first open RStudio, the app is divided into three sections.\nMost sections have tabs for even more additional ways to view different sorts of things.\nThese sections can be customized and placed wherever you want through the RStudio menu options (if you’d rather the Files tab be in the top right instead of the top left, for example). Preferences &gt; Pane Layout\n\nThe tall section on the left is the console and that’s where you can type in R code to execute.\nThis code is also called commands or functions.\n\nIn the top right section, there’s the Environment tab where you can see the data or objects you are currently working on.\nAt first this section is empty because you have not loaded any data yet.\nThere’s also a tab in the top right section for History– this is where RStudio keeps track of the commands you run in the console.\n\nA viewer is on the bottom right, where there are tabs to flip through the Files and folder structure of your computer (like in Finder or Explorer), the Plots (diagrams) when they’ve been generated, your list of available R Packages, Help information etc.\n\nReproducibility: Save your scripts\nThere’s a difference between quick, on-the-fly analysis and analysis you want to rerun later on.\nThe code you type out and run in console can be copied and pasted and saved in scripts and R Markdown files. Scripts end with .R file extension and R Markdown files, which mixes both R code and Markdown code, end with .Rmd.\nR scripts versus R Markdown\nYou may hear mentions of “R Markdown” and that’s essentially the same thing as R scripts except with some enhanced formatting so that the code can be published as a pdf or a website or notebook. R scripts and R Markdown can only be opened by coding programs but the websites or PDFs generated by R Markdown can be open by non-programming people. It’s a means for communicating your results effectively to a wider audience. Compare the differences here and here.\nIn this course we’ll be alternating between typing code in the console and typing and saving code in a script. The code that’s disposable and written just for quick exploration can be and will be written in the console. Code we want to reuse and re purpose later on should be saved in a script.\n\nThese R source code files can be viewed in a Source section and pushes the console window down to accommodate.\nTo create a new script go through the menu File &gt; New File &gt; R Script or through the green plus button on the top left. This will expand the 3 windows in RStudio to 4. The script viewer will appear in the top left quadrant and push the console window into the lower left.\n\nThe file extensions for these files when saved ends with .R\nAny code we type in here can be run in the console. Hitting the Run button at the top of the script window will run the line of code on which the cursor is sitting.\nTo run multiple lines of code, highlight them and click Run.\n\nBe sure to save your scripts after you create them. And also save before running your code in case you write code that makes R crash– which will happen once in a while.",
    "crumbs": [
      "Getting Started",
      "Data types in R"
    ]
  },
  {
    "objectID": "getting_started/data_types.html#scripts",
    "href": "getting_started/data_types.html#scripts",
    "title": "Data types in R",
    "section": "Scripts",
    "text": "Scripts\nR is an interpreter that uses a command line based environment.\nThis means that you have to type commands, rather than use the mouse and menus.\nThis has the advantage that you do not always have to retype commands.\nYou can store your commands in files, the so-called scripts. These scripts have typically file names with the extension .R as in script.R.\nYou can open an editor window to edit these files by clicking File &gt; New or File &gt; Open file…\nYou can run (send to the console window) part of the code by selecting lines and pressing CTRL+ENTER or CMD+ENTER or click the Run button at the top of the script editor window. If you do not select anything, R will run the line your cursor is on.\nYou can always run the whole script with the function source()\nFor example, to run the entire saved script.R if it’s in the root directory of the working directory, type\n\nsource(\"script.R\")\n\nYou can also click Run all in the editor window or type CTRL+SHIFT+S or CMD+SHIFT+S",
    "crumbs": [
      "Getting Started",
      "Data types in R"
    ]
  },
  {
    "objectID": "getting_started/data_types.html#project-directory-habits",
    "href": "getting_started/data_types.html#project-directory-habits",
    "title": "Data types in R",
    "section": "Project directory habits",
    "text": "Project directory habits\nYour working directory is the folder on your computer in which you are currently working. When you ask R to open a certain file, it will look in the working directory for this file, and when you tell R to save a data file or figure, it will save it in the working directory.\nBefore you start working, please set your working directory to where all your data and script files are or should be stored.\nWhen you see code in a black box throughout this class, I want you to run that code in R unless noted otherwise. You can run it in the console, I’d prefer you do so in a script so you can see your history. In the video, you’ll see me swap back and forth between coding in the console and the script. This really depends on if I’m experimenting with code quickly or if it’s something I know I should track. Often I will copy and paste code executed from the console to growing script as an afterthought. Also, be sure to read the commented out code because I try to give additional context, like tips on what to do if the command fails.\nThis is an example of setting a working directory to a manual directory on your computer.\n\n# On a mac, it'd look like this\nsetwd(\"~/projects/learn-r-journalism\")\n\n# On a PC, it might look like this\nsetwd(\"C:/Documents/learn-r-journalism\")\n\nMake sure that slashes are forward slashes and that you don’t forget the quotation marks.\nWithin RStudio, you can also set the working directory via the menu Tools &gt; Set Working Directory\n\nThe commands above, setwd() was an example of setting an absolute folder.\nThis works for you for the purposes of this class, but if you wanted to share your methodology and script in the future or if you wanted to save run the code on another computer it would likely not work because it would be looking through a folder structure that doesn’t exist on any computer except the one where the original script was written. This is not ideal for reproducibility.\nWorking directories are a tough concept. If you’re curious about learning the BEST method for setting up directories for each project you’re working on, I’ve got some documentation.\nAlso, if you’re still curious, I follow this structure for all my R projects.",
    "crumbs": [
      "Getting Started",
      "Data types in R"
    ]
  },
  {
    "objectID": "getting_started/data_types.html#syntax",
    "href": "getting_started/data_types.html#syntax",
    "title": "Data types in R",
    "section": "Syntax",
    "text": "Syntax\nYou must follow pretty specific syntax rules for it to work. R won’t guess for you.\n\n\nR is case-sensitive (unlike SQL) intepreted language (unlike C)\nCan enter commands at prompt &gt; or in batch\nComments are preceded by #\n\nThis is important to use often in your code for documentation\nYou’ll see it often in this course\n\nStatements are lines of code such as functions and object assignments\n\nEnters in code (as in a new line) or semi-colons will separate statements",
    "crumbs": [
      "Getting Started",
      "Data types in R"
    ]
  },
  {
    "objectID": "getting_started/data_types.html#libraries",
    "href": "getting_started/data_types.html#libraries",
    "title": "Data types in R",
    "section": "Libraries",
    "text": "Libraries\nOne of the many benefits of R is that it is open source and free. This means users like you and me can create code that we use code that people in the data community created to make everyone’s lives easier.\nThese shared code snippets can help you do something as simple as combining spreadsheets in a folder or something as complicated as seasonally adjusting data in a time series.\nThey are organized in so-called packages or libraries.\nYou can do a lot of statistical analysis in R without any additional libraries— this is called base R.\nBut other users have created libraries with functions that solve common problems. R package users download only the libraries that they need for an individual project.\nTo get a list of all installed packages, go to the packages window or type library() in the console window. If the box in front of the package name is ticked in the packages window, the package is loaded and the functions within it are ready to be called.\nThere are many more packages available on the R website. If you want to install and use a package (for example, the packaged called “dplyr”) you should:\n\nInstall the package: click install packages in the packages window and type dplyr or type install.packages(\"dplyr\") in the console window.\nLoad the package: Check box in front of dplyr or type library(\"dplyr\") in the console window.",
    "crumbs": [
      "Getting Started",
      "Data types in R"
    ]
  },
  {
    "objectID": "getting_started/data_types.html#common-r-commands",
    "href": "getting_started/data_types.html#common-r-commands",
    "title": "Data types in R",
    "section": "Common R commands",
    "text": "Common R commands\nR can be used as a calculator.\nJust type an equation in the console window after the &gt;\nIn those code sections, the code preceded by ## is the output of the code from the lines above.\nPlease type in 10^2 + 26 into the R environment below and click Run code.\n\n\n\n\n\n\n\n\n\n\n\n\nWorkspace\nYou can give numbers a name.\nBy doing so, they become so-called variables which can be used later.\nYou can assign values to an object name with either a = or &lt;-.\nThe command below sets 4 as a.\n\n\n\n\n\n\n\n\na is now saved up in the Environment tab in RStudio.\n\nYou can do calculations with a now.\nTry multiplying a with any number.\na * _\n\n\n\n\n\n\n\n\nIf you specify a again, it will forget what value you had before because you did not assign it to anything.\n\n\n\n\n\n\n\n\nYou can also assign a value to a using the old one\n\n\n\n\n\n\n\n\nTo remove all variables from R’s memory, type\n\n\n\n\n\n\n\n\nor click the “clear all” broom button in the work space window.",
    "crumbs": [
      "Getting Started",
      "Data types in R"
    ]
  },
  {
    "objectID": "getting_started/data_types.html#objects-in-r",
    "href": "getting_started/data_types.html#objects-in-r",
    "title": "Data types in R",
    "section": "Objects in R",
    "text": "Objects in R\n\nScalars and vectors\nLike in many other programs, R organizes numbers in scalars (a single number 0-dimensional), vectors (a row of numbers, also called arrays - `-dimensional) and matrices (which we won’t get into now).\nThe a you defined was scalar.\nTo define a vector with the numbers 3,4, and 5, you need the function c() which is short for concatenate (or paste together).",
    "crumbs": [
      "Getting Started",
      "Data types in R"
    ]
  },
  {
    "objectID": "getting_started/data_types.html#functions",
    "href": "getting_started/data_types.html#functions",
    "title": "Data types in R",
    "section": "Functions",
    "text": "Functions\nIf you would like to compute the mean of all the elements in the vector b from the example above, you could type\nPlease type out (300+4000+50)/3 in the code tester below:\n\n\n\n\n\n\nBut when the vector is very long, this is very boring and time-consuming work.\nFunctions do things to data. R is built on them. Some functions come with R, like median() or summary() and others come as part of packages that others have created.\nWhen you use a function to compute an average, you’ll type\n\nmean(x=b)\n\nWithin the brackets you specify the arguments.\nArguments give extra information to the function. In this case, the argument x says of which set of numbers (vector) the mean should computed (namely of b).\nSometimes the name of the argument is not necessary:\n\n\n\n\n\n\n\n\nAlso works.",
    "crumbs": [
      "Getting Started",
      "Data types in R"
    ]
  },
  {
    "objectID": "getting_started/data_types.html#plots",
    "href": "getting_started/data_types.html#plots",
    "title": "Data types in R",
    "section": "Plots",
    "text": "Plots\nR can make simple graphics right away.\n\n\n\n\n\n\n\n\n\nIn the first line, 100 random numbers are assigned to the variable x, which becomes a vector by this operation.\nIn the second line, all these values are plotted in the plot window.",
    "crumbs": [
      "Getting Started",
      "Data types in R"
    ]
  },
  {
    "objectID": "getting_started/data_types.html#not-available-data",
    "href": "getting_started/data_types.html#not-available-data",
    "title": "Data types in R",
    "section": "Not available data",
    "text": "Not available data\nWhen you work with real data, you will encounter missing values because instrumentation failed or human error.\nWhen a data is not available, you’ll often find an NA instead of a number.\n\n\n\n\n\n\n\n\nComputing statistics of incomplete data sets is strictly not possible.\nmaybe the largest value occurred during the weekend when you didn’t measure. Therefore, R will say that it doesn’t know what the largest value of j is\n\n\n\n\n\n\n\n\nIf you don’t mind about the missing data and want to compute the statistics anyway, you can add the argument na.rm=TRUE (Should I remove the NAs? Yes)\n\nmax(j, na.rm=T)\n\nNAs will also affect any sort of math if you’re not careful\n\n\n\n\n\n\n\n\nHere are some links on how to handle NAs in your data",
    "crumbs": [
      "Getting Started",
      "Data types in R"
    ]
  },
  {
    "objectID": "getting_started/data_types.html#base-r-versus-tidyverse",
    "href": "getting_started/data_types.html#base-r-versus-tidyverse",
    "title": "Data types in R",
    "section": "Base R versus Tidyverse",
    "text": "Base R versus Tidyverse\nI will often mention “Base R” and “Tidyverse” throughout the course.\nBase R is what you get when you install R and don’t install anything extra.\nEverything you do in Tidyverse– the importing and wrangling of data, as well as the visualizations– can be done with Base R. It’s just older, the syntax is trickier, and it unfortunately has huge learning curve.\nFor the purposes of this class, you’ll learn just enough Base R to get things done but we’ll spend most of our time using functions in packages that have since been created by users to make our lives easier and have a good history of support from their creators.",
    "crumbs": [
      "Getting Started",
      "Data types in R"
    ]
  }
]